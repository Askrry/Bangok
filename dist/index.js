!function(t){var e={};function s(i){if(e[i])return e[i].exports;var n=e[i]={i:i,l:!1,exports:{}};return t[i].call(n.exports,n,n.exports,s),n.l=!0,n.exports}s.m=t,s.c=e,s.d=function(t,e,i){s.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:i})},s.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},s.t=function(t,e){if(1&e&&(t=s(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var i=Object.create(null);if(s.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var n in t)s.d(i,n,function(e){return t[e]}.bind(null,n));return i},s.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return s.d(e,"a",e),e},s.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},s.p="",s(s.s=13)}([function(t,e,s){var i=s(16),n=s(1);void 0===n.myNameSpace&&(n.myNameSpace=i),t.exports=i},function(t,e,s){"use strict";(function(e){t.exports=function(){if("object"==typeof globalThis)return globalThis;var t;try{t=this||new Function("return this")()}catch(t){if("object"==typeof window)return window;if("object"==typeof self)return self;if(void 0!==e)return e}return t}()}).call(this,s(17))},function(t,e,s){var i=s(24),n=s(1);void 0===n.myNameSpace&&(n.myNameSpace=i),t.exports=i},function(t,e,s){var i=s(15),n=s(1);void 0===n.myNameSpace&&(n.myNameSpace=i),t.exports=i},function(t,e,s){var i=s(18),n=s(1);void 0===n.myNameSpace&&(n.myNameSpace=i),t.exports=i},function(t,e,s){var i=s(19),n=s(1);void 0===n.myNameSpace&&(n.myNameSpace=i),t.exports=i},function(t,e,s){var i=s(20),n=s(1);void 0===n.myNameSpace&&(n.myNameSpace=i),t.exports=i},function(t,e,s){var i=s(21),n=s(1);void 0===n.myNameSpace&&(n.myNameSpace=i),t.exports=i},function(t,e,s){var i=s(22),n=s(1);void 0===n.myNameSpace&&(n.myNameSpace=i),t.exports=i},function(t,e,s){var i=s(23),n=s(1);void 0===n.myNameSpace&&(n.myNameSpace=i),t.exports=i},function(t,e,s){var i=s(25),n=s(1);void 0===n.myNameSpace&&(n.myNameSpace=i),t.exports=i},function(t,e,s){var i=s(26),n=s(1);void 0===n.myNameSpace&&(n.myNameSpace=i),t.exports=i},function(t,e,s){var i=s(27),n=s(1);void 0===n.myNameSpace&&(n.myNameSpace=i),t.exports=i},function(t,e,s){var i=s(14),n=s(1);void 0===n.myNameSpace&&(n.myNameSpace=i),t.exports=i},function(t,e,s){"use strict";s.r(e),s.d(e,"default",(function(){return y}));var i=s(3),n=s.n(i),r=s(4),o=s.n(r),a=s(5),c=s.n(a),d=s(6),l=s.n(d),u=s(7),h=s.n(u),p=s(8),m=s.n(p),v=s(10),_=s.n(v),b=s(11),f=s.n(b);class y{constructor(){}async render(){this.renderCarousel(),this.renderRibbon(),this.renderStepSlider(),this.renderCartIcon(),this.cart=new f.a(this.cartIcon),this.products=await this.fetchProducts(),this.renderProductsGrid(),this.productsGrid.updateFilter({noNuts:document.getElementById("nuts-checkbox").checked,vegeterianOnly:document.getElementById("vegeterian-checkbox").checked,maxSpiciness:this.stepSlider.value,category:this.ribbonMenu.value}),document.body.addEventListener("product-add",({detail:t})=>{let e=this.products.find(e=>e.id==t);this.cart.addProduct(e)}),this.stepSlider.elem.addEventListener("slider-change",({detail:t})=>{this.productsGrid.updateFilter({maxSpiciness:t})}),this.ribbonMenu.elem.addEventListener("ribbon-select",({detail:t})=>{this.productsGrid.updateFilter({category:t})}),document.getElementById("nuts-checkbox").onchange=t=>{this.productsGrid.updateFilter({noNuts:t.target.checked})},document.getElementById("vegeterian-checkbox").onchange=t=>{this.productsGrid.updateFilter({vegeterianOnly:t.target.checked})}}renderCarousel(){this.carousel=new n.a(o.a),document.querySelector("[data-carousel-holder]").append(this.carousel.elem)}renderRibbon(){this.ribbonMenu=new c.a(l.a),document.querySelector("[data-ribbon-holder]").append(this.ribbonMenu.elem)}renderStepSlider(){this.stepSlider=new h.a({steps:5,value:3}),document.querySelector("[data-slider-holder]").append(this.stepSlider.elem)}renderCartIcon(){let t=document.querySelector("[data-cart-icon-holder]");this.cartIcon=new _.a,t.append(this.cartIcon.elem)}renderProductsGrid(){this.productsGrid=new m.a(this.products),document.querySelector("[data-products-grid-holder]").innerHTML="",document.querySelector("[data-products-grid-holder]").append(this.productsGrid.elem)}async fetchProducts(){let t=await fetch("products.json");return await t.json()}}document.addEventListener("DOMContentLoaded",()=>{(new y).render().then(()=>console.log("Страница готова!"))})},function(t,e,s){"use strict";s.r(e),s.d(e,"default",(function(){return r}));var i=s(0),n=s.n(i);class r{constructor(t){this.slides=t,this.currentSlideNumber=0,this.render(),this.addEventListeners()}render(){this.elem=n()('\n        <div class="carousel">\n          <div class="carousel__arrow carousel__arrow_right">\n            <img src="/assets/images/icons/angle-icon.svg" alt="icon" />\n          </div>\n          <div class="carousel__arrow carousel__arrow_left">\n            <img src="/assets/images/icons/angle-left-icon.svg" alt="icon" />\n          </div>\n          <div class="carousel__inner"></div>\n        </div>\n        ');let t=this.slides.map(t=>n()(`\n      <div class="carousel__slide" data-id="${t.id}">\n        <img\n          src="/assets/images/carousel/${t.image}"\n          class="carousel__img"\n          alt="slide"\n        />\n        <div class="carousel__caption">\n          <span class="carousel__price">€${t.price.toFixed(2)}</span>\n          <div class="carousel__title">${t.name}</div>\n          <button type="button" class="carousel__button">\n            <img src="/assets/images/icons/plus-icon.svg" alt="icon" />\n          </button>\n        </div>\n      </div>`));this.sub("inner").append(...t),this.update()}addEventListeners(){this.elem.onclick=({target:t})=>{if(t.closest(".carousel__button")){let e=t.closest("[data-id]").dataset.id;this.elem.dispatchEvent(new CustomEvent("product-add",{detail:e,bubbles:!0}))}t.closest(".carousel__arrow_right")&&this.next(),t.closest(".carousel__arrow_left")&&this.prev()}}sub(t){return this.elem.querySelector(".carousel__"+t)}next(){this.currentSlideNumber++,this.update()}prev(){this.currentSlideNumber--,this.update()}update(){let t=-this.elem.offsetWidth*this.currentSlideNumber;this.sub("inner").style.transform=`translateX(${t}px)`,this.currentSlideNumber==this.slides.length-1?this.sub("arrow_right").style.display="none":this.sub("arrow_right").style.display="",0==this.currentSlideNumber?this.sub("arrow_left").style.display="none":this.sub("arrow_left").style.display=""}}},function(t,e,s){"use strict";s.r(e),e.default=function(t){const e=document.createElement("div");return e.innerHTML=t,e.firstElementChild}},function(t,e){var s;s=function(){return this}();try{s=s||new Function("return this")()}catch(t){"object"==typeof window&&(s=window)}t.exports=s},function(t,e,s){"use strict";s.r(e),e.default=[{name:"Penang shrimp",price:16,image:"penang_shrimp.png",id:"penang-shrimp"},{name:"Chicken cashew",price:14,image:"chicken_cashew.png",id:"chicken-cashew"},{name:"Red curry veggies",price:12.5,image:"red_curry_vega.png",id:"red-curry-veggies"},{name:"Chicken springrolls",price:6.5,image:"chicken_loempias.png",id:"chicken-springrolls"}]},function(t,e,s){"use strict";s.r(e),s.d(e,"default",(function(){return r}));var i=s(0),n=s.n(i);class r{constructor(t){this.categories=t,this.render(),this.addEventListeners(),this.value=""}render(){this.elem=n()('\n      <div class="ribbon">\n        <button class="ribbon__arrow ribbon__arrow_left">\n          <img src="/assets/images/icons/angle-icon.svg" alt="icon" />\n        </button>\n        <nav class="ribbon__inner"></nav>\n        <button class="ribbon__arrow ribbon__arrow_right ribbon__arrow_visible">\n          <img src="/assets/images/icons/angle-icon.svg" alt="icon" />\n        </button>\n      </div>\n    ');for(let t of this.categories){let e=n()('<a href="#" class="ribbon__item"></a>');e.textContent=t.name,e.dataset.id=t.id,this.elem.querySelector(".ribbon__inner").append(e)}this.sub("item").classList.add("ribbon__item_active")}addEventListeners(){this.sub("arrow_left").onclick=t=>this.onArrowLeftClick(t),this.sub("arrow_right").onclick=t=>this.onArrowRightClick(t),this.elem.onclick=t=>{let e=t.target.closest(".ribbon__item");e&&(this.onItemClick(e),t.preventDefault())},this.sub("inner").onscroll=t=>this.onScroll(t)}onArrowRightClick(t){this.sub("inner").scrollBy(350,0),this.updateArrows()}onArrowLeftClick(t){this.sub("inner").scrollBy(-350,0),this.updateArrows()}onItemClick(t){let e=this.sub("item_active");e&&e.classList.remove("ribbon__item_active"),t.classList.add("ribbon__item_active"),this.value=t.dataset.id,this.elem.dispatchEvent(new CustomEvent("ribbon-select",{detail:this.value,bubbles:!0}))}onScroll(t){this.updateArrows()}sub(t){return this.elem.querySelector(".ribbon__"+t)}scrollRight(){return this.sub("inner").scrollWidth-(this.sub("inner").scrollLeft+this.sub("inner").clientWidth)}scrollLeft(){return this.sub("inner").scrollLeft}updateArrows(){this.scrollLeft()>0?this.sub("arrow_left").classList.add("ribbon__arrow_visible"):this.sub("arrow_left").classList.remove("ribbon__arrow_visible");let t=this.scrollRight();t=t<1?0:t,t>0?this.sub("arrow_right").classList.add("ribbon__arrow_visible"):this.sub("arrow_right").classList.remove("ribbon__arrow_visible")}}},function(t,e,s){"use strict";s.r(e),e.default=[{id:"",name:"All"},{id:"salads",name:"Salads"},{id:"soups",name:"Soups"},{id:"chicken-dishes",name:"Chicken dishes"},{id:"beef-dishes",name:"Beef dishes"},{id:"seafood-dishes",name:"Seafood dishes"},{id:"vegetable-dishes",name:"Vegetable dishes"},{id:"bits-and-bites",name:"Bits and bites"},{id:"on-the-side",name:"On the side"}]},function(t,e,s){"use strict";s.r(e),s.d(e,"default",(function(){return r}));var i=s(0),n=s.n(i);class r{constructor({steps:t,value:e=0}){this.steps=t,this.value=e,this.quantity=this.steps-1,this.stepSlider=n()(`<div class="slider">\n      <div class="slider__thumb" style="left: ${this.value/this.quantity*100}%;">\n        <span class="slider__value">${this.value}</span>\n      </div>\n      <div class="slider__progress" style="width: ${this.value/this.quantity*100}%;"></div>\n      <div class="slider__steps">${"<span></span>".repeat(this.steps)}</div>\n    </div>`),this.sliderSteps=this.stepSlider.querySelector(".slider__steps"),this.sliderSteps.children[this.value].classList.add("slider__step-active"),this.thumb=this.stepSlider.querySelector(".slider__thumb"),this.progress=this.stepSlider.querySelector(".slider__progress"),this.sliderValue=this.stepSlider.querySelector(".slider__value"),this.thumb.ondragstart=function(){return!1},this.thumb.style.touchAction="none",this.thumb.onpointerdown=t=>{t.preventDefault(),this.stepSlider.classList.add("slider_dragging"),this.thumb.addEventListener("pointermove",this.onPointerMove),this.thumb.addEventListener("pointerup",this.onPointerUp)},this.stepSlider.onclick=t=>{let e=(t.clientX-this.sliderSteps.getBoundingClientRect().left)/this.sliderSteps.offsetWidth;this.setValue(Math.round(this.quantity*e));let s=new CustomEvent("slider-change",{detail:this.value,bubbles:!0});this.stepSlider.dispatchEvent(s)}}onPointerMove(t){t.preventDefault();let e=this.calcLeftByEvent(t);for(let t of this.sliderSteps.children)t.classList.contains("slider__step-active")&&t.classList.remove("slider__step-active");this.value=Math.round(e*this.quantity),this.sliderValue.textContent=this.value,this.sliderSteps.children[this.value].classList.add("slider__step-active"),this.thumb.style.left=100*e+"%",this.progress.style.width=100*e+"%"}calcLeftByEvent(t){let e=(t.clientX-this.elem.getBoundingClientRect().left)/this.elem.offsetWidth;return e<0&&(e=0),e>1&&(e=1),e}onPointerUp(t){this.stepSlider.classList.remove("slider_dragging"),this.thumb.style.left=this.value/this.quantity*100+"%",this.progress.style.width=this.value/this.quantity*100+"%";let e=new CustomEvent("slider-change",{detail:this.value,bubbles:!0});this.stepSlider.dispatchEvent(e),this.thumb.removeEventListener("pointermove",this.onPointerMove),this.thumb.removeEventListener("pointerup",this.onPointerUp)}setValue(t){this.value=t;let e=t/this.quantity*100;this.thumb.style.left=e+"%",this.progress.style.width=e+"%",this.sliderValue.textContent=t;for(let t of this.sliderSteps.children)t.classList.contains("slider__step-active")&&t.classList.remove("slider__step-active");this.sliderSteps.children[t].classList.add("slider__step-active")}get elem(){return this.stepSlider}}},function(t,e,s){"use strict";s.r(e),s.d(e,"default",(function(){return a}));var i=s(0),n=s.n(i),r=s(9),o=s.n(r);class a{constructor(t){this.products=t,this.filters={},this.render()}render(){this.elem=n()('<div class="products-grid">\n      <div class="products-grid__inner"></div>\n    </div>'),this.renderContent()}renderContent(){this.sub("inner").innerHTML="";for(let t of this.products){if(this.filters.noNuts&&t.nuts)continue;if(this.filters.vegeterianOnly&&!t.vegeterian)continue;if(void 0!==this.filters.maxSpiciness&&t.spiciness>this.filters.maxSpiciness)continue;if(this.filters.category&&t.category!=this.filters.category)continue;let e=new o.a(t);this.sub("inner").append(e.elem)}}updateFilter(t){Object.assign(this.filters,t),this.renderContent()}sub(t){return this.elem.querySelector(".products-grid__"+t)}}},function(t,e,s){"use strict";s.r(e),s.d(e,"default",(function(){return a}));var i=s(0),n=s.n(i),r=s(2),o=s.n(r);class a{constructor(t){this.product=t,this.render(),this.addEventListeners()}render(){this.elem=n()(`<div class="card">\n      <div class="card__top">\n        <img\n          src="/assets/images/products/${this.product.image}"\n          class="card__image"\n          alt="product"\n        />\n        <span class="card__price">€${this.product.price.toFixed(2)}</span>\n      </div>\n      <div class="card__body">\n        <div class="card__title">${o()(this.product.name)}</div>\n        <button type="button" class="card__button">\n          <img src="/assets/images/icons/plus-icon.svg" alt="icon" />\n        </button>\n      </div>\n    </div>`)}addEventListeners(){this.elem.onclick=t=>this.onClick(t)}onClick(t){this.elem.dispatchEvent(new CustomEvent("product-add",{detail:this.product.id,bubbles:!0}))}}},function(t,e,s){"use strict";s.r(e),e.default=t=>Array.from(t).map(t=>{switch(t){case"&":return"&amp;";case'"':return"&quot;";case"'":return"&#39;";case"<":return"&lt;";case">":return"&gt;";default:return t}}).join("")},function(t,e,s){"use strict";s.r(e),s.d(e,"default",(function(){return r}));var i=s(0),n=s.n(i);class r{constructor(){this.render(),this.addEventListeners()}render(){this.elem=n()('<div class="cart-icon"></div>')}update(t){t.isEmpty()?this.elem.classList.remove("cart-icon_visible"):(this.elem.classList.add("cart-icon_visible"),this.elem.innerHTML=`\n        <div class="cart-icon__inner">\n          <span class="cart-icon__count">${t.getTotalCount()}</span>\n          <span class="cart-icon__price">€${t.getTotalPrice().toFixed(2)}</span>\n        </div>`,this.updatePosition(),this.elem.classList.add("shake"),this.elem.addEventListener("transitionend",()=>{this.elem.classList.remove("shake")},{once:!0}))}updatePosition(){if(!this.elem.offsetHeight)return;if(this.initialTopCoord||(this.initialTopCoord=this.elem.getBoundingClientRect().top+window.pageYOffset),document.documentElement.clientWidth<=767)return void this.resetPosition();window.pageYOffset>this.initialTopCoord?this.fixPosition():this.resetPosition()}fixPosition(){Object.assign(this.elem.style,{position:"fixed",top:"50px",zIndex:1e3,left:Math.min(document.querySelector(".container").getBoundingClientRect().right+20,document.documentElement.clientWidth-this.elem.offsetWidth-10)+"px"})}resetPosition(){Object.assign(this.elem.style,{position:"",top:"",left:"",zIndex:""})}addEventListeners(){document.addEventListener("scroll",()=>this.updatePosition()),window.addEventListener("resize",()=>this.updatePosition())}}},function(t,e,s){"use strict";s.r(e),s.d(e,"default",(function(){return d}));var i=s(0),n=s.n(i),r=s(2),o=s.n(r),a=s(12),c=s.n(a);class d{constructor(t){this.cartIcon=t,this.cartItems=[],this.addEventListeners()}addProduct(t){if(!t||null===t)return;let e=this.cartItems.find(e=>e.product.id==t.id);e?e.count+=1:this.cartItems.push({product:t,count:1}),this.onProductUpdate(this.cartItems)}updateProductCount(t,e){let s=this.cartItems.find(e=>e.product.id==t),i=this.cartItems.indexOf(s);if(1==s.count&&-1==e){this.fromBody.querySelector(`[data-product-id="${t}"]`).remove();let e=this.fromBody.querySelector(".cart-buttons__info-price");this.cartItems.splice(i,1),e.innerHTML="€"+this.getTotalPrice().toFixed(2),this.isEmpty()&&this.modalWindow.close()}else s.count+=e,console.log(s),this.onProductUpdate(s)}isEmpty(){return 0==this.cartItems.length}getTotalCount(){return this.cartItems.reduce((t,e)=>t+e.count,0)}getTotalPrice(){return this.cartItems.reduce((t,e)=>t+e.product.price*e.count,0)}renderProduct(t,e){return n()(`\n    <div class="cart-product" data-product-id="${t.id}">\n      <div class="cart-product__img">\n        <img src="/assets/images/products/${t.image}" alt="product">\n      </div>\n      <div class="cart-product__info">\n        <div class="cart-product__title">${o()(t.name)}</div>\n        <div class="cart-product__price-wrap">\n          <div class="cart-counter">\n            <button type="button" class="cart-counter__button cart-counter__button_minus">\n              <img src="/assets/images/icons/square-minus-icon.svg" alt="minus">\n            </button>\n            <span class="cart-counter__count">${e}</span>\n            <button type="button" class="cart-counter__button cart-counter__button_plus">\n              <img src="/assets/images/icons/square-plus-icon.svg" alt="plus">\n            </button>\n          </div>\n          <div class="cart-product__price">€${t.price.toFixed(2)}</div>\n        </div>\n      </div>\n    </div>`)}renderOrderForm(){return n()(`<form class="cart-form">\n      <h5 class="cart-form__title">Delivery</h5>\n      <div class="cart-form__group cart-form__group_row">\n        <input name="name" type="text" class="cart-form__input" placeholder="Name" required value="Santa Claus">\n        <input name="email" type="email" class="cart-form__input" placeholder="Email" required value="john@gmail.com">\n        <input name="tel" type="tel" class="cart-form__input" placeholder="Phone" required value="+1234567">\n      </div>\n      <div class="cart-form__group">\n        <input name="address" type="text" class="cart-form__input" placeholder="Address" required value="North, Lapland, Snow Home">\n      </div>\n      <div class="cart-buttons">\n        <div class="cart-buttons__buttons btn-group">\n          <div class="cart-buttons__info">\n            <span class="cart-buttons__info-text">total</span>\n            <span class="cart-buttons__info-price">€${this.getTotalPrice().toFixed(2)}</span>\n          </div>\n          <button type="submit" class="cart-buttons__button btn-group__button button">order</button>\n        </div>\n      </div>\n    </form>`)}renderModal(){this.modalWindow=new c.a,this.modalWindow.setTitle("Your order"),this.fromBody=document.createElement("div");for(let t of this.cartItems){let e=this.renderProduct(t.product,t.count);this.fromBody.append(e)}this.fromBody.append(this.renderOrderForm()),this.modalWindow.setBody(this.fromBody),this.modalWindow.open(),this.fromBody.addEventListener("click",t=>{let e=t.target;const s=e.closest(".cart-product");console.log(s);let i=s.dataset.productId;console.log(i);let n=0;e.closest(".cart-counter__button_minus")&&(n-=1),e.closest(".cart-counter__button_plus")&&(n+=1),this.updateProductCount(i,n)}),this.fromBody.querySelector(".cart-form").addEventListener("submit",this.onSubmit)}onProductUpdate(t){if(this.cartIcon.update(this),!document.body.classList.contains("is-modal-open"))return;let e=t.product.id,s=this.fromBody.querySelector(`[data-product-id="${e}"] .cart-counter__count`),i=this.fromBody.querySelector(`[data-product-id="${e}"] .cart-product__price`),n=this.fromBody.querySelector(".cart-buttons__info-price");s.innerHTML=t.count,i.innerHTML="€"+(t.count*t.product.price).toFixed(2),n.innerHTML="€"+this.getTotalPrice().toFixed(2)}onSubmit(t){t.preventDefault();let e=t.target,s=e.closest(".modal"),i=s.querySelector(".modal__title"),n=e.closest(".cart-form"),r=e.querySelector("button"),o=this.cartItems,a=s.querySelector(".modal__body");r.hasAttribute("type")&&(r.classList.add("is-loading"),fetch("https://httpbin.org/post",{method:"POST",body:new FormData(n)}).then((function(t){t.ok?(i.innerHTML="Success!",o.splice(0,o.length),a.innerHTML='<div class="modal__body-inner">\n          <p>\n            Order successful! Your order is being cooked :) <br>\n            We’ll notify you about delivery time shortly.<br>\n            <img src="/assets/images/delivery.gif">\n          </p>\n        </div>'):alert("HTTP - Error: "+t.status)})))}addEventListeners(){this.cartIcon.elem.onclick=()=>this.renderModal()}}},function(t,e,s){"use strict";s.r(e),s.d(e,"default",(function(){return r}));var i=s(0),n=s.n(i);class r{constructor(){this.render(),this.elem.addEventListener("click",t=>this.onClick(t))}render(){this.elem=n()('\n      <div class="modal">\n        <div class="modal__overlay"></div>\n        <div class="modal__inner">\n          <div class="modal__header">\n            <button type="button" class="modal__close">\n              <img src="/assets/images/icons/cross-icon.svg" alt="close-icon" />\n            </button>\n            <h3 class="modal__title"></h3>\n          </div>\n          <div class="modal__body"></div>\n        </div>\n      </div>\n    ')}sub(t){return this.elem.querySelector(".modal__"+t)}open(){document.body.append(this.elem),document.body.classList.add("is-modal-open"),this._keydownEventListener=t=>this.onDocumentKeyDown(t),document.addEventListener("keydown",this._keydownEventListener),this.elem.querySelector("[autofocus]")&&this.elem.querySelector("[autofocus]").focus()}onClick(t){t.target.closest(".modal__close")&&(t.preventDefault(),this.close())}onDocumentKeyDown(t){"Escape"===t.code&&(t.preventDefault(),this.close())}setTitle(t){this.sub("title").textContent=t}setBody(t){this.sub("body").innerHTML="",this.sub("body").append(t)}close(){document.removeEventListener("keydown",this._keydownEventListener),document.body.classList.remove("is-modal-open"),this.elem.remove()}}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2xpYi9jcmVhdGUtZWxlbWVudC1leHBvc2VkLmpzIiwid2VicGFjazovLy8uL25vZGVfbW9kdWxlcy9leHBvc2UtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRHbG9iYWxUaGlzLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9saWIvZXNjYXBlLWh0bWwtZXhwb3NlZC5qcyIsIndlYnBhY2s6Ly8vLi82LW1vZHVsZS8zLXRhc2svaW5kZXgtZXhwb3NlZC5qcyIsIndlYnBhY2s6Ly8vLi82LW1vZHVsZS8zLXRhc2svc2xpZGVzLWV4cG9zZWQuanMiLCJ3ZWJwYWNrOi8vLy4vNy1tb2R1bGUvMS10YXNrL2luZGV4LWV4cG9zZWQuanMiLCJ3ZWJwYWNrOi8vLy4vNy1tb2R1bGUvMS10YXNrL2NhdGVnb3JpZXMtZXhwb3NlZC5qcyIsIndlYnBhY2s6Ly8vLi83LW1vZHVsZS80LXRhc2svaW5kZXgtZXhwb3NlZC5qcyIsIndlYnBhY2s6Ly8vLi84LW1vZHVsZS8yLXRhc2svaW5kZXgtZXhwb3NlZC5qcyIsIndlYnBhY2s6Ly8vLi82LW1vZHVsZS8yLXRhc2svaW5kZXgtZXhwb3NlZC5qcyIsIndlYnBhY2s6Ly8vLi84LW1vZHVsZS8xLXRhc2svaW5kZXgtZXhwb3NlZC5qcyIsIndlYnBhY2s6Ly8vLi84LW1vZHVsZS80LXRhc2svaW5kZXgtZXhwb3NlZC5qcyIsIndlYnBhY2s6Ly8vLi83LW1vZHVsZS8yLXRhc2svaW5kZXgtZXhwb3NlZC5qcyIsIndlYnBhY2s6Ly8vLi85LW1vZHVsZS8yLXRhc2svaW5kZXgtZXhwb3NlZC5qcyIsIndlYnBhY2s6Ly8vLi85LW1vZHVsZS8yLXRhc2svaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vNi1tb2R1bGUvMy10YXNrL2luZGV4LmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9saWIvY3JlYXRlLWVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vLyh3ZWJwYWNrKS9idWlsZGluL2dsb2JhbC5qcyIsIndlYnBhY2s6Ly8vLi82LW1vZHVsZS8zLXRhc2svc2xpZGVzLmpzIiwid2VicGFjazovLy8uLzctbW9kdWxlLzEtdGFzay9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi83LW1vZHVsZS8xLXRhc2svY2F0ZWdvcmllcy5qcyIsIndlYnBhY2s6Ly8vLi83LW1vZHVsZS80LXRhc2svaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vOC1tb2R1bGUvMi10YXNrL2luZGV4LmpzIiwid2VicGFjazovLy8uLzYtbW9kdWxlLzItdGFzay9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvbGliL2VzY2FwZS1odG1sLmpzIiwid2VicGFjazovLy8uLzgtbW9kdWxlLzEtdGFzay9pbmRleC5qcyIsIndlYnBhY2s6Ly8vLi84LW1vZHVsZS80LXRhc2svaW5kZXguanMiLCJ3ZWJwYWNrOi8vLy4vNy1tb2R1bGUvMi10YXNrL2luZGV4LmpzIl0sIm5hbWVzIjpbImluc3RhbGxlZE1vZHVsZXMiLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJleHBvcnRzIiwibW9kdWxlIiwiaSIsImwiLCJtb2R1bGVzIiwiY2FsbCIsIm0iLCJjIiwiZCIsIm5hbWUiLCJnZXR0ZXIiLCJvIiwiT2JqZWN0IiwiZGVmaW5lUHJvcGVydHkiLCJlbnVtZXJhYmxlIiwiZ2V0IiwiciIsIlN5bWJvbCIsInRvU3RyaW5nVGFnIiwidmFsdWUiLCJ0IiwibW9kZSIsIl9fZXNNb2R1bGUiLCJucyIsImNyZWF0ZSIsImtleSIsImJpbmQiLCJuIiwib2JqZWN0IiwicHJvcGVydHkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsInAiLCJzIiwiX19fRVhQT1NFX0xPQURFUl9JTVBPUlRfX18iLCJfX19FWFBPU0VfTE9BREVSX0dMT0JBTF9USElTX19fIiwiZ2xvYmFsVGhpcyIsImciLCJ0aGlzIiwiRnVuY3Rpb24iLCJlIiwid2luZG93Iiwic2VsZiIsImdsb2JhbCIsIk1haW4iLCJyZW5kZXJDYXJvdXNlbCIsInJlbmRlclJpYmJvbiIsInJlbmRlclN0ZXBTbGlkZXIiLCJyZW5kZXJDYXJ0SWNvbiIsImNhcnQiLCJjYXJ0SWNvbiIsInByb2R1Y3RzIiwiZmV0Y2hQcm9kdWN0cyIsInJlbmRlclByb2R1Y3RzR3JpZCIsInByb2R1Y3RzR3JpZCIsInVwZGF0ZUZpbHRlciIsIm5vTnV0cyIsImRvY3VtZW50IiwiZ2V0RWxlbWVudEJ5SWQiLCJjaGVja2VkIiwidmVnZXRlcmlhbk9ubHkiLCJtYXhTcGljaW5lc3MiLCJzdGVwU2xpZGVyIiwiY2F0ZWdvcnkiLCJyaWJib25NZW51IiwiYm9keSIsImFkZEV2ZW50TGlzdGVuZXIiLCJkZXRhaWwiLCJwcm9kdWN0SWQiLCJwcm9kdWN0IiwiZmluZCIsImlkIiwiYWRkUHJvZHVjdCIsImVsZW0iLCJjYXRlZ29yeUlkIiwib25jaGFuZ2UiLCJldmVudCIsInRhcmdldCIsImNhcm91c2VsIiwicXVlcnlTZWxlY3RvciIsImFwcGVuZCIsInN0ZXBzIiwiY2FydEljb25Ib2xkZXIiLCJpbm5lckhUTUwiLCJyZXNwb25zZSIsImZldGNoIiwianNvbiIsInJlbmRlciIsInRoZW4iLCJjb25zb2xlIiwibG9nIiwiQ2Fyb3VzZWwiLCJzbGlkZXMiLCJjdXJyZW50U2xpZGVOdW1iZXIiLCJhZGRFdmVudExpc3RlbmVycyIsIm1hcCIsIml0ZW0iLCJpbWFnZSIsInByaWNlIiwidG9GaXhlZCIsInN1YiIsInVwZGF0ZSIsIm9uY2xpY2siLCJjbG9zZXN0IiwiZGF0YXNldCIsImRpc3BhdGNoRXZlbnQiLCJDdXN0b21FdmVudCIsImJ1YmJsZXMiLCJuZXh0IiwicHJldiIsInJlZiIsIm9mZnNldCIsIm9mZnNldFdpZHRoIiwic3R5bGUiLCJ0cmFuc2Zvcm0iLCJsZW5ndGgiLCJkaXNwbGF5IiwiZGl2IiwiY3JlYXRlRWxlbWVudCIsImh0bWwiLCJmaXJzdEVsZW1lbnRDaGlsZCIsIlJpYmJvbk1lbnUiLCJjYXRlZ29yaWVzIiwiY2F0ZWdvcnlFbGVtIiwidGV4dENvbnRlbnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJvbkFycm93TGVmdENsaWNrIiwib25BcnJvd1JpZ2h0Q2xpY2siLCJpdGVtRWxlbSIsIm9uSXRlbUNsaWNrIiwicHJldmVudERlZmF1bHQiLCJvbnNjcm9sbCIsIm9uU2Nyb2xsIiwic2Nyb2xsQnkiLCJ1cGRhdGVBcnJvd3MiLCJvbGRBY3RpdmUiLCJyZW1vdmUiLCJzY3JvbGxXaWR0aCIsInNjcm9sbExlZnQiLCJjbGllbnRXaWR0aCIsInNjcm9sbFJpZ2h0IiwiU3RlcFNsaWRlciIsInF1YW50aXR5IiwicmVwZWF0Iiwic2xpZGVyU3RlcHMiLCJjaGlsZHJlbiIsInRodW1iIiwicHJvZ3Jlc3MiLCJzbGlkZXJWYWx1ZSIsIm9uZHJhZ3N0YXJ0IiwidG91Y2hBY3Rpb24iLCJvbnBvaW50ZXJkb3duIiwib25Qb2ludGVyTW92ZSIsIm9uUG9pbnRlclVwIiwibmV3TGVmdCIsImNsaWVudFgiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJsZWZ0Iiwic2V0VmFsdWUiLCJNYXRoIiwicm91bmQiLCJteUV2ZW50IiwiY2FsY0xlZnRCeUV2ZW50IiwiY2hpbGQiLCJjb250YWlucyIsIndpZHRoIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsInZhbHVlUGVyY2VudHMiLCJQcm9kdWN0R3JpZCIsImZpbHRlcnMiLCJyZW5kZXJDb250ZW50IiwibnV0cyIsInZlZ2V0ZXJpYW4iLCJ1bmRlZmluZWQiLCJzcGljaW5lc3MiLCJjYXJkIiwiYXNzaWduIiwiUHJvZHVjdENhcmQiLCJvbkNsaWNrIiwic3RyaW5nIiwiY2hhciIsImpvaW4iLCJDYXJ0SWNvbiIsImlzRW1wdHkiLCJnZXRUb3RhbENvdW50IiwiZ2V0VG90YWxQcmljZSIsInVwZGF0ZVBvc2l0aW9uIiwib25jZSIsIm9mZnNldEhlaWdodCIsImluaXRpYWxUb3BDb29yZCIsInRvcCIsInBhZ2VZT2Zmc2V0IiwiZG9jdW1lbnRFbGVtZW50IiwicmVzZXRQb3NpdGlvbiIsImZpeFBvc2l0aW9uIiwicG9zaXRpb24iLCJ6SW5kZXgiLCJtaW4iLCJyaWdodCIsIkNhcnQiLCJjYXJ0SXRlbXMiLCJyZXp1bHQiLCJjb3VudCIsInB1c2giLCJvblByb2R1Y3RVcGRhdGUiLCJhbW91bnQiLCJmaW5kUHJvZHVjdCIsImluZGV4IiwiaW5kZXhPZiIsImZyb21Cb2R5IiwiaW5mb1ByaWNlIiwic3BsaWNlIiwibW9kYWxXaW5kb3ciLCJjbG9zZSIsInJlZHVjZSIsInN1bSIsImN1cnJlbnQiLCJzZXRUaXRsZSIsInJlbmRlclByb2R1Y3QiLCJyZW5kZXJPcmRlckZvcm0iLCJzZXRCb2R5Iiwib3BlbiIsImlkUHJvZHVjdCIsInVwZGF0ZVByb2R1Y3RDb3VudCIsIm9uU3VibWl0IiwiY2FydEl0ZW0iLCJwcm9kdWN0Q291bnQiLCJwcm9kdWN0UHJpY2UiLCJtb2RhbFdpbmQiLCJtb2RhbFRpdGxlIiwiZm9ybSIsImJ1dHRvbiIsImNhckl0ZW1zIiwiYm9keU1vZGFsV2luZCIsImhhc0F0dHJpYnV0ZSIsIm1ldGhvZCIsIkZvcm1EYXRhIiwib2siLCJhbGVydCIsInN0YXR1cyIsInJlbmRlck1vZGFsIiwiTW9kYWwiLCJfa2V5ZG93bkV2ZW50TGlzdGVuZXIiLCJvbkRvY3VtZW50S2V5RG93biIsImZvY3VzIiwiY29kZSIsInRpdGxlIiwibm9kZSJdLCJtYXBwaW5ncyI6ImFBQ0UsSUFBSUEsRUFBbUIsR0FHdkIsU0FBU0MsRUFBb0JDLEdBRzVCLEdBQUdGLEVBQWlCRSxHQUNuQixPQUFPRixFQUFpQkUsR0FBVUMsUUFHbkMsSUFBSUMsRUFBU0osRUFBaUJFLEdBQVksQ0FDekNHLEVBQUdILEVBQ0hJLEdBQUcsRUFDSEgsUUFBUyxJQVVWLE9BTkFJLEVBQVFMLEdBQVVNLEtBQUtKLEVBQU9ELFFBQVNDLEVBQVFBLEVBQU9ELFFBQVNGLEdBRy9ERyxFQUFPRSxHQUFJLEVBR0pGLEVBQU9ELFFBS2ZGLEVBQW9CUSxFQUFJRixFQUd4Qk4sRUFBb0JTLEVBQUlWLEVBR3hCQyxFQUFvQlUsRUFBSSxTQUFTUixFQUFTUyxFQUFNQyxH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QkFDTjdGLEtBQUtnTCxTQUlULGtCQUFrQjFJLEdBQ0csV0FBZkEsRUFBTTBLLE9BQ1IxSyxFQUFNdUQsaUJBQ043RixLQUFLZ0wsU0FJVCxTQUFTaUMsR0FDUGpOLEtBQUs4RCxJQUFJLFNBQVN3QixZQUFjMkgsRUFHbEMsUUFBUUMsR0FDTmxOLEtBQUs4RCxJQUFJLFFBQVFqQixVQUFZLEdBQzdCN0MsS0FBSzhELElBQUksUUFBUXBCLE9BQU93SyxHQUcxQixRQUNFL0wsU0FBUzhHLG9CQUFvQixVQUFXakksS0FBSzZNLHVCQUM3QzFMLFNBQVNRLEtBQUs0RCxVQUFVWSxPQUFPLGlCQUMvQm5HLEtBQUttQyxLQUFLZ0UiLCJmaWxlIjoiaW5kZXguanMiLCJzb3VyY2VzQ29udGVudCI6WyIgXHQvLyBUaGUgbW9kdWxlIGNhY2hlXG4gXHR2YXIgaW5zdGFsbGVkTW9kdWxlcyA9IHt9O1xuXG4gXHQvLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuIFx0ZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXG4gXHRcdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuIFx0XHRpZihpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSkge1xuIFx0XHRcdHJldHVybiBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXS5leHBvcnRzO1xuIFx0XHR9XG4gXHRcdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG4gXHRcdHZhciBtb2R1bGUgPSBpbnN0YWxsZWRNb2R1bGVzW21vZHVsZUlkXSA9IHtcbiBcdFx0XHRpOiBtb2R1bGVJZCxcbiBcdFx0XHRsOiBmYWxzZSxcbiBcdFx0XHRleHBvcnRzOiB7fVxuIFx0XHR9O1xuXG4gXHRcdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuIFx0XHRtb2R1bGVzW21vZHVsZUlkXS5jYWxsKG1vZHVsZS5leHBvcnRzLCBtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuIFx0XHQvLyBGbGFnIHRoZSBtb2R1bGUgYXMgbG9hZGVkXG4gXHRcdG1vZHVsZS5sID0gdHJ1ZTtcblxuIFx0XHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuIFx0XHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG4gXHR9XG5cblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubSA9IG1vZHVsZXM7XG5cbiBcdC8vIGV4cG9zZSB0aGUgbW9kdWxlIGNhY2hlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmMgPSBpbnN0YWxsZWRNb2R1bGVzO1xuXG4gXHQvLyBkZWZpbmUgZ2V0dGVyIGZ1bmN0aW9uIGZvciBoYXJtb255IGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uZCA9IGZ1bmN0aW9uKGV4cG9ydHMsIG5hbWUsIGdldHRlcikge1xuIFx0XHRpZighX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIG5hbWUpKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIG5hbWUsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBnZXR0ZXIgfSk7XG4gXHRcdH1cbiBcdH07XG5cbiBcdC8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbiBcdF9fd2VicGFja19yZXF1aXJlX18uciA9IGZ1bmN0aW9uKGV4cG9ydHMpIHtcbiBcdFx0aWYodHlwZW9mIFN5bWJvbCAhPT0gJ3VuZGVmaW5lZCcgJiYgU3ltYm9sLnRvU3RyaW5nVGFnKSB7XG4gXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFN5bWJvbC50b1N0cmluZ1RhZywgeyB2YWx1ZTogJ01vZHVsZScgfSk7XG4gXHRcdH1cbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsICdfX2VzTW9kdWxlJywgeyB2YWx1ZTogdHJ1ZSB9KTtcbiBcdH07XG5cbiBcdC8vIGNyZWF0ZSBhIGZha2UgbmFtZXNwYWNlIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDE6IHZhbHVlIGlzIGEgbW9kdWxlIGlkLCByZXF1aXJlIGl0XG4gXHQvLyBtb2RlICYgMjogbWVyZ2UgYWxsIHByb3BlcnRpZXMgb2YgdmFsdWUgaW50byB0aGUgbnNcbiBcdC8vIG1vZGUgJiA0OiByZXR1cm4gdmFsdWUgd2hlbiBhbHJlYWR5IG5zIG9iamVjdFxuIFx0Ly8gbW9kZSAmIDh8MTogYmVoYXZlIGxpa2UgcmVxdWlyZVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy50ID0gZnVuY3Rpb24odmFsdWUsIG1vZGUpIHtcbiBcdFx0aWYobW9kZSAmIDEpIHZhbHVlID0gX193ZWJwYWNrX3JlcXVpcmVfXyh2YWx1ZSk7XG4gXHRcdGlmKG1vZGUgJiA4KSByZXR1cm4gdmFsdWU7XG4gXHRcdGlmKChtb2RlICYgNCkgJiYgdHlwZW9mIHZhbHVlID09PSAnb2JqZWN0JyAmJiB2YWx1ZSAmJiB2YWx1ZS5fX2VzTW9kdWxlKSByZXR1cm4gdmFsdWU7XG4gXHRcdHZhciBucyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gXHRcdF9fd2VicGFja19yZXF1aXJlX18ucihucyk7XG4gXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShucywgJ2RlZmF1bHQnLCB7IGVudW1lcmFibGU6IHRydWUsIHZhbHVlOiB2YWx1ZSB9KTtcbiBcdFx0aWYobW9kZSAmIDIgJiYgdHlwZW9mIHZhbHVlICE9ICdzdHJpbmcnKSBmb3IodmFyIGtleSBpbiB2YWx1ZSkgX193ZWJwYWNrX3JlcXVpcmVfXy5kKG5zLCBrZXksIGZ1bmN0aW9uKGtleSkgeyByZXR1cm4gdmFsdWVba2V5XTsgfS5iaW5kKG51bGwsIGtleSkpO1xuIFx0XHRyZXR1cm4gbnM7XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiO1xuXG5cbiBcdC8vIExvYWQgZW50cnkgbW9kdWxlIGFuZCByZXR1cm4gZXhwb3J0c1xuIFx0cmV0dXJuIF9fd2VicGFja19yZXF1aXJlX18oX193ZWJwYWNrX3JlcXVpcmVfXy5zID0gMTMpO1xuIiwidmFyIF9fX0VYUE9TRV9MT0FERVJfSU1QT1JUX19fID0gcmVxdWlyZShcIi0hLi9jcmVhdGUtZWxlbWVudC5qc1wiKTtcbnZhciBfX19FWFBPU0VfTE9BREVSX0dFVF9HTE9CQUxfVEhJU19fXyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvZXhwb3NlLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0R2xvYmFsVGhpcy5qc1wiKTtcbnZhciBfX19FWFBPU0VfTE9BREVSX0dMT0JBTF9USElTX19fID0gX19fRVhQT1NFX0xPQURFUl9HRVRfR0xPQkFMX1RISVNfX187XG5pZiAodHlwZW9mIF9fX0VYUE9TRV9MT0FERVJfR0xPQkFMX1RISVNfX19bXCJteU5hbWVTcGFjZVwiXSA9PT0gJ3VuZGVmaW5lZCcpIF9fX0VYUE9TRV9MT0FERVJfR0xPQkFMX1RISVNfX19bXCJteU5hbWVTcGFjZVwiXSA9IF9fX0VYUE9TRV9MT0FERVJfSU1QT1JUX19fO1xubW9kdWxlLmV4cG9ydHMgPSBfX19FWFBPU0VfTE9BREVSX0lNUE9SVF9fXztcbiIsIlwidXNlIHN0cmljdFwiO1xuXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgZnVuYy1uYW1lc1xubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoKSB7XG4gIGlmICh0eXBlb2YgZ2xvYmFsVGhpcyA9PT0gXCJvYmplY3RcIikge1xuICAgIHJldHVybiBnbG9iYWxUaGlzO1xuICB9XG5cbiAgdmFyIGc7XG5cbiAgdHJ5IHtcbiAgICAvLyBUaGlzIHdvcmtzIGlmIGV2YWwgaXMgYWxsb3dlZCAoc2VlIENTUClcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tbmV3LWZ1bmNcbiAgICBnID0gdGhpcyB8fCBuZXcgRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xuICB9IGNhdGNoIChlKSB7XG4gICAgLy8gVGhpcyB3b3JrcyBpZiB0aGUgd2luZG93IHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcbiAgICBpZiAodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIikge1xuICAgICAgcmV0dXJuIHdpbmRvdztcbiAgICB9IC8vIFRoaXMgd29ya3MgaWYgdGhlIHNlbGYgcmVmZXJlbmNlIGlzIGF2YWlsYWJsZVxuXG5cbiAgICBpZiAodHlwZW9mIHNlbGYgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgIHJldHVybiBzZWxmO1xuICAgIH0gLy8gVGhpcyB3b3JrcyBpZiB0aGUgZ2xvYmFsIHJlZmVyZW5jZSBpcyBhdmFpbGFibGVcblxuXG4gICAgaWYgKHR5cGVvZiBnbG9iYWwgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHJldHVybiBnbG9iYWw7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIGc7XG59KCk7IiwidmFyIF9fX0VYUE9TRV9MT0FERVJfSU1QT1JUX19fID0gcmVxdWlyZShcIi0hLi9lc2NhcGUtaHRtbC5qc1wiKTtcbnZhciBfX19FWFBPU0VfTE9BREVSX0dFVF9HTE9CQUxfVEhJU19fXyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvZXhwb3NlLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0R2xvYmFsVGhpcy5qc1wiKTtcbnZhciBfX19FWFBPU0VfTE9BREVSX0dMT0JBTF9USElTX19fID0gX19fRVhQT1NFX0xPQURFUl9HRVRfR0xPQkFMX1RISVNfX187XG5pZiAodHlwZW9mIF9fX0VYUE9TRV9MT0FERVJfR0xPQkFMX1RISVNfX19bXCJteU5hbWVTcGFjZVwiXSA9PT0gJ3VuZGVmaW5lZCcpIF9fX0VYUE9TRV9MT0FERVJfR0xPQkFMX1RISVNfX19bXCJteU5hbWVTcGFjZVwiXSA9IF9fX0VYUE9TRV9MT0FERVJfSU1QT1JUX19fO1xubW9kdWxlLmV4cG9ydHMgPSBfX19FWFBPU0VfTE9BREVSX0lNUE9SVF9fXztcbiIsInZhciBfX19FWFBPU0VfTE9BREVSX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCItIS4vaW5kZXguanNcIik7XG52YXIgX19fRVhQT1NFX0xPQURFUl9HRVRfR0xPQkFMX1RISVNfX18gPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2V4cG9zZS1sb2FkZXIvZGlzdC9ydW50aW1lL2dldEdsb2JhbFRoaXMuanNcIik7XG52YXIgX19fRVhQT1NFX0xPQURFUl9HTE9CQUxfVEhJU19fXyA9IF9fX0VYUE9TRV9MT0FERVJfR0VUX0dMT0JBTF9USElTX19fO1xuaWYgKHR5cGVvZiBfX19FWFBPU0VfTE9BREVSX0dMT0JBTF9USElTX19fW1wibXlOYW1lU3BhY2VcIl0gPT09ICd1bmRlZmluZWQnKSBfX19FWFBPU0VfTE9BREVSX0dMT0JBTF9USElTX19fW1wibXlOYW1lU3BhY2VcIl0gPSBfX19FWFBPU0VfTE9BREVSX0lNUE9SVF9fXztcbm1vZHVsZS5leHBvcnRzID0gX19fRVhQT1NFX0xPQURFUl9JTVBPUlRfX187XG4iLCJ2YXIgX19fRVhQT1NFX0xPQURFUl9JTVBPUlRfX18gPSByZXF1aXJlKFwiLSEuL3NsaWRlcy5qc1wiKTtcbnZhciBfX19FWFBPU0VfTE9BREVSX0dFVF9HTE9CQUxfVEhJU19fXyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvZXhwb3NlLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0R2xvYmFsVGhpcy5qc1wiKTtcbnZhciBfX19FWFBPU0VfTE9BREVSX0dMT0JBTF9USElTX19fID0gX19fRVhQT1NFX0xPQURFUl9HRVRfR0xPQkFMX1RISVNfX187XG5pZiAodHlwZW9mIF9fX0VYUE9TRV9MT0FERVJfR0xPQkFMX1RISVNfX19bXCJteU5hbWVTcGFjZVwiXSA9PT0gJ3VuZGVmaW5lZCcpIF9fX0VYUE9TRV9MT0FERVJfR0xPQkFMX1RISVNfX19bXCJteU5hbWVTcGFjZVwiXSA9IF9fX0VYUE9TRV9MT0FERVJfSU1QT1JUX19fO1xubW9kdWxlLmV4cG9ydHMgPSBfX19FWFBPU0VfTE9BREVSX0lNUE9SVF9fXztcbiIsInZhciBfX19FWFBPU0VfTE9BREVSX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCItIS4vaW5kZXguanNcIik7XG52YXIgX19fRVhQT1NFX0xPQURFUl9HRVRfR0xPQkFMX1RISVNfX18gPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2V4cG9zZS1sb2FkZXIvZGlzdC9ydW50aW1lL2dldEdsb2JhbFRoaXMuanNcIik7XG52YXIgX19fRVhQT1NFX0xPQURFUl9HTE9CQUxfVEhJU19fXyA9IF9fX0VYUE9TRV9MT0FERVJfR0VUX0dMT0JBTF9USElTX19fO1xuaWYgKHR5cGVvZiBfX19FWFBPU0VfTE9BREVSX0dMT0JBTF9USElTX19fW1wibXlOYW1lU3BhY2VcIl0gPT09ICd1bmRlZmluZWQnKSBfX19FWFBPU0VfTE9BREVSX0dMT0JBTF9USElTX19fW1wibXlOYW1lU3BhY2VcIl0gPSBfX19FWFBPU0VfTE9BREVSX0lNUE9SVF9fXztcbm1vZHVsZS5leHBvcnRzID0gX19fRVhQT1NFX0xPQURFUl9JTVBPUlRfX187XG4iLCJ2YXIgX19fRVhQT1NFX0xPQURFUl9JTVBPUlRfX18gPSByZXF1aXJlKFwiLSEuL2NhdGVnb3JpZXMuanNcIik7XG52YXIgX19fRVhQT1NFX0xPQURFUl9HRVRfR0xPQkFMX1RISVNfX18gPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2V4cG9zZS1sb2FkZXIvZGlzdC9ydW50aW1lL2dldEdsb2JhbFRoaXMuanNcIik7XG52YXIgX19fRVhQT1NFX0xPQURFUl9HTE9CQUxfVEhJU19fXyA9IF9fX0VYUE9TRV9MT0FERVJfR0VUX0dMT0JBTF9USElTX19fO1xuaWYgKHR5cGVvZiBfX19FWFBPU0VfTE9BREVSX0dMT0JBTF9USElTX19fW1wibXlOYW1lU3BhY2VcIl0gPT09ICd1bmRlZmluZWQnKSBfX19FWFBPU0VfTE9BREVSX0dMT0JBTF9USElTX19fW1wibXlOYW1lU3BhY2VcIl0gPSBfX19FWFBPU0VfTE9BREVSX0lNUE9SVF9fXztcbm1vZHVsZS5leHBvcnRzID0gX19fRVhQT1NFX0xPQURFUl9JTVBPUlRfX187XG4iLCJ2YXIgX19fRVhQT1NFX0xPQURFUl9JTVBPUlRfX18gPSByZXF1aXJlKFwiLSEuL2luZGV4LmpzXCIpO1xudmFyIF9fX0VYUE9TRV9MT0FERVJfR0VUX0dMT0JBTF9USElTX19fID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9leHBvc2UtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRHbG9iYWxUaGlzLmpzXCIpO1xudmFyIF9fX0VYUE9TRV9MT0FERVJfR0xPQkFMX1RISVNfX18gPSBfX19FWFBPU0VfTE9BREVSX0dFVF9HTE9CQUxfVEhJU19fXztcbmlmICh0eXBlb2YgX19fRVhQT1NFX0xPQURFUl9HTE9CQUxfVEhJU19fX1tcIm15TmFtZVNwYWNlXCJdID09PSAndW5kZWZpbmVkJykgX19fRVhQT1NFX0xPQURFUl9HTE9CQUxfVEhJU19fX1tcIm15TmFtZVNwYWNlXCJdID0gX19fRVhQT1NFX0xPQURFUl9JTVBPUlRfX187XG5tb2R1bGUuZXhwb3J0cyA9IF9fX0VYUE9TRV9MT0FERVJfSU1QT1JUX19fO1xuIiwidmFyIF9fX0VYUE9TRV9MT0FERVJfSU1QT1JUX19fID0gcmVxdWlyZShcIi0hLi9pbmRleC5qc1wiKTtcbnZhciBfX19FWFBPU0VfTE9BREVSX0dFVF9HTE9CQUxfVEhJU19fXyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvZXhwb3NlLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0R2xvYmFsVGhpcy5qc1wiKTtcbnZhciBfX19FWFBPU0VfTE9BREVSX0dMT0JBTF9USElTX19fID0gX19fRVhQT1NFX0xPQURFUl9HRVRfR0xPQkFMX1RISVNfX187XG5pZiAodHlwZW9mIF9fX0VYUE9TRV9MT0FERVJfR0xPQkFMX1RISVNfX19bXCJteU5hbWVTcGFjZVwiXSA9PT0gJ3VuZGVmaW5lZCcpIF9fX0VYUE9TRV9MT0FERVJfR0xPQkFMX1RISVNfX19bXCJteU5hbWVTcGFjZVwiXSA9IF9fX0VYUE9TRV9MT0FERVJfSU1QT1JUX19fO1xubW9kdWxlLmV4cG9ydHMgPSBfX19FWFBPU0VfTE9BREVSX0lNUE9SVF9fXztcbiIsInZhciBfX19FWFBPU0VfTE9BREVSX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCItIS4vaW5kZXguanNcIik7XG52YXIgX19fRVhQT1NFX0xPQURFUl9HRVRfR0xPQkFMX1RISVNfX18gPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2V4cG9zZS1sb2FkZXIvZGlzdC9ydW50aW1lL2dldEdsb2JhbFRoaXMuanNcIik7XG52YXIgX19fRVhQT1NFX0xPQURFUl9HTE9CQUxfVEhJU19fXyA9IF9fX0VYUE9TRV9MT0FERVJfR0VUX0dMT0JBTF9USElTX19fO1xuaWYgKHR5cGVvZiBfX19FWFBPU0VfTE9BREVSX0dMT0JBTF9USElTX19fW1wibXlOYW1lU3BhY2VcIl0gPT09ICd1bmRlZmluZWQnKSBfX19FWFBPU0VfTE9BREVSX0dMT0JBTF9USElTX19fW1wibXlOYW1lU3BhY2VcIl0gPSBfX19FWFBPU0VfTE9BREVSX0lNUE9SVF9fXztcbm1vZHVsZS5leHBvcnRzID0gX19fRVhQT1NFX0xPQURFUl9JTVBPUlRfX187XG4iLCJ2YXIgX19fRVhQT1NFX0xPQURFUl9JTVBPUlRfX18gPSByZXF1aXJlKFwiLSEuL2luZGV4LmpzXCIpO1xudmFyIF9fX0VYUE9TRV9MT0FERVJfR0VUX0dMT0JBTF9USElTX19fID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9leHBvc2UtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRHbG9iYWxUaGlzLmpzXCIpO1xudmFyIF9fX0VYUE9TRV9MT0FERVJfR0xPQkFMX1RISVNfX18gPSBfX19FWFBPU0VfTE9BREVSX0dFVF9HTE9CQUxfVEhJU19fXztcbmlmICh0eXBlb2YgX19fRVhQT1NFX0xPQURFUl9HTE9CQUxfVEhJU19fX1tcIm15TmFtZVNwYWNlXCJdID09PSAndW5kZWZpbmVkJykgX19fRVhQT1NFX0xPQURFUl9HTE9CQUxfVEhJU19fX1tcIm15TmFtZVNwYWNlXCJdID0gX19fRVhQT1NFX0xPQURFUl9JTVBPUlRfX187XG5tb2R1bGUuZXhwb3J0cyA9IF9fX0VYUE9TRV9MT0FERVJfSU1QT1JUX19fO1xuIiwidmFyIF9fX0VYUE9TRV9MT0FERVJfSU1QT1JUX19fID0gcmVxdWlyZShcIi0hLi9pbmRleC5qc1wiKTtcbnZhciBfX19FWFBPU0VfTE9BREVSX0dFVF9HTE9CQUxfVEhJU19fXyA9IHJlcXVpcmUoXCIuLi8uLi9ub2RlX21vZHVsZXMvZXhwb3NlLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0R2xvYmFsVGhpcy5qc1wiKTtcbnZhciBfX19FWFBPU0VfTE9BREVSX0dMT0JBTF9USElTX19fID0gX19fRVhQT1NFX0xPQURFUl9HRVRfR0xPQkFMX1RISVNfX187XG5pZiAodHlwZW9mIF9fX0VYUE9TRV9MT0FERVJfR0xPQkFMX1RISVNfX19bXCJteU5hbWVTcGFjZVwiXSA9PT0gJ3VuZGVmaW5lZCcpIF9fX0VYUE9TRV9MT0FERVJfR0xPQkFMX1RISVNfX19bXCJteU5hbWVTcGFjZVwiXSA9IF9fX0VYUE9TRV9MT0FERVJfSU1QT1JUX19fO1xubW9kdWxlLmV4cG9ydHMgPSBfX19FWFBPU0VfTE9BREVSX0lNUE9SVF9fXztcbiIsInZhciBfX19FWFBPU0VfTE9BREVSX0lNUE9SVF9fXyA9IHJlcXVpcmUoXCItIS4vaW5kZXguanNcIik7XG52YXIgX19fRVhQT1NFX0xPQURFUl9HRVRfR0xPQkFMX1RISVNfX18gPSByZXF1aXJlKFwiLi4vLi4vbm9kZV9tb2R1bGVzL2V4cG9zZS1sb2FkZXIvZGlzdC9ydW50aW1lL2dldEdsb2JhbFRoaXMuanNcIik7XG52YXIgX19fRVhQT1NFX0xPQURFUl9HTE9CQUxfVEhJU19fXyA9IF9fX0VYUE9TRV9MT0FERVJfR0VUX0dMT0JBTF9USElTX19fO1xuaWYgKHR5cGVvZiBfX19FWFBPU0VfTE9BREVSX0dMT0JBTF9USElTX19fW1wibXlOYW1lU3BhY2VcIl0gPT09ICd1bmRlZmluZWQnKSBfX19FWFBPU0VfTE9BREVSX0dMT0JBTF9USElTX19fW1wibXlOYW1lU3BhY2VcIl0gPSBfX19FWFBPU0VfTE9BREVSX0lNUE9SVF9fXztcbm1vZHVsZS5leHBvcnRzID0gX19fRVhQT1NFX0xPQURFUl9JTVBPUlRfX187XG4iLCJ2YXIgX19fRVhQT1NFX0xPQURFUl9JTVBPUlRfX18gPSByZXF1aXJlKFwiLSEuL2luZGV4LmpzXCIpO1xudmFyIF9fX0VYUE9TRV9MT0FERVJfR0VUX0dMT0JBTF9USElTX19fID0gcmVxdWlyZShcIi4uLy4uL25vZGVfbW9kdWxlcy9leHBvc2UtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRHbG9iYWxUaGlzLmpzXCIpO1xudmFyIF9fX0VYUE9TRV9MT0FERVJfR0xPQkFMX1RISVNfX18gPSBfX19FWFBPU0VfTE9BREVSX0dFVF9HTE9CQUxfVEhJU19fXztcbmlmICh0eXBlb2YgX19fRVhQT1NFX0xPQURFUl9HTE9CQUxfVEhJU19fX1tcIm15TmFtZVNwYWNlXCJdID09PSAndW5kZWZpbmVkJykgX19fRVhQT1NFX0xPQURFUl9HTE9CQUxfVEhJU19fX1tcIm15TmFtZVNwYWNlXCJdID0gX19fRVhQT1NFX0xPQURFUl9JTVBPUlRfX187XG5tb2R1bGUuZXhwb3J0cyA9IF9fX0VYUE9TRV9MT0FERVJfSU1QT1JUX19fO1xuIiwiaW1wb3J0IENhcm91c2VsIGZyb20gJy4uLy4uLzYtbW9kdWxlLzMtdGFzay9pbmRleC5qcyc7XHJcbmltcG9ydCBzbGlkZXMgZnJvbSAnLi4vLi4vNi1tb2R1bGUvMy10YXNrL3NsaWRlcy5qcyc7XHJcblxyXG5pbXBvcnQgUmliYm9uTWVudSBmcm9tICcuLi8uLi83LW1vZHVsZS8xLXRhc2svaW5kZXguanMnO1xyXG5pbXBvcnQgY2F0ZWdvcmllcyBmcm9tICcuLi8uLi83LW1vZHVsZS8xLXRhc2svY2F0ZWdvcmllcy5qcyc7XHJcblxyXG5pbXBvcnQgU3RlcFNsaWRlciBmcm9tICcuLi8uLi83LW1vZHVsZS80LXRhc2svaW5kZXguanMnO1xyXG5pbXBvcnQgUHJvZHVjdHNHcmlkIGZyb20gJy4uLy4uLzgtbW9kdWxlLzItdGFzay9pbmRleC5qcyc7XHJcblxyXG5pbXBvcnQgQ2FydEljb24gZnJvbSAnLi4vLi4vOC1tb2R1bGUvMS10YXNrL2luZGV4LmpzJztcclxuaW1wb3J0IENhcnQgZnJvbSAnLi4vLi4vOC1tb2R1bGUvNC10YXNrL2luZGV4LmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1haW4ge1xyXG5cclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICB9XHJcblxyXG4gIGFzeW5jIHJlbmRlcigpIHtcclxuICAgIHRoaXMucmVuZGVyQ2Fyb3VzZWwoKTtcclxuICAgIHRoaXMucmVuZGVyUmliYm9uKCk7XHJcbiAgICB0aGlzLnJlbmRlclN0ZXBTbGlkZXIoKTtcclxuICAgIHRoaXMucmVuZGVyQ2FydEljb24oKTtcclxuXHJcbiAgICB0aGlzLmNhcnQgPSBuZXcgQ2FydCh0aGlzLmNhcnRJY29uKTtcclxuXHJcbiAgICB0aGlzLnByb2R1Y3RzID0gYXdhaXQgdGhpcy5mZXRjaFByb2R1Y3RzKCk7XHJcblxyXG4gICAgdGhpcy5yZW5kZXJQcm9kdWN0c0dyaWQoKTtcclxuXHJcbiAgICB0aGlzLnByb2R1Y3RzR3JpZC51cGRhdGVGaWx0ZXIoe1xyXG4gICAgICBub051dHM6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCdudXRzLWNoZWNrYm94JykuY2hlY2tlZCxcclxuICAgICAgdmVnZXRlcmlhbk9ubHk6IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd2ZWdldGVyaWFuLWNoZWNrYm94JykuY2hlY2tlZCxcclxuICAgICAgbWF4U3BpY2luZXNzOiB0aGlzLnN0ZXBTbGlkZXIudmFsdWUsXHJcbiAgICAgIGNhdGVnb3J5OiB0aGlzLnJpYmJvbk1lbnUudmFsdWVcclxuICAgIH0pO1xyXG5cclxuICAgIGRvY3VtZW50LmJvZHkuYWRkRXZlbnRMaXN0ZW5lcigncHJvZHVjdC1hZGQnLCAoeyBkZXRhaWw6IHByb2R1Y3RJZCB9KSA9PiB7XHJcbiAgICAgIGxldCBwcm9kdWN0ID0gdGhpcy5wcm9kdWN0cy5maW5kKHByb2R1Y3QgPT4gcHJvZHVjdC5pZCA9PSBwcm9kdWN0SWQpO1xyXG4gICAgICB0aGlzLmNhcnQuYWRkUHJvZHVjdChwcm9kdWN0KTtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMuc3RlcFNsaWRlci5lbGVtLmFkZEV2ZW50TGlzdGVuZXIoJ3NsaWRlci1jaGFuZ2UnLCAoeyBkZXRhaWw6IHZhbHVlIH0pID0+IHtcclxuICAgICAgdGhpcy5wcm9kdWN0c0dyaWQudXBkYXRlRmlsdGVyKHtcclxuICAgICAgICBtYXhTcGljaW5lc3M6IHZhbHVlXHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5yaWJib25NZW51LmVsZW0uYWRkRXZlbnRMaXN0ZW5lcigncmliYm9uLXNlbGVjdCcsICh7IGRldGFpbDogY2F0ZWdvcnlJZCB9KSA9PiB7XHJcbiAgICAgIHRoaXMucHJvZHVjdHNHcmlkLnVwZGF0ZUZpbHRlcih7XHJcbiAgICAgICAgY2F0ZWdvcnk6IGNhdGVnb3J5SWRcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbnV0cy1jaGVja2JveCcpLm9uY2hhbmdlID0gZXZlbnQgPT4ge1xyXG4gICAgICB0aGlzLnByb2R1Y3RzR3JpZC51cGRhdGVGaWx0ZXIoe1xyXG4gICAgICAgIG5vTnV0czogZXZlbnQudGFyZ2V0LmNoZWNrZWRcclxuICAgICAgfSk7XHJcbiAgICB9O1xyXG5cclxuICAgIGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCd2ZWdldGVyaWFuLWNoZWNrYm94Jykub25jaGFuZ2UgPSBldmVudCA9PiB7XHJcbiAgICAgIHRoaXMucHJvZHVjdHNHcmlkLnVwZGF0ZUZpbHRlcih7XHJcbiAgICAgICAgdmVnZXRlcmlhbk9ubHk6IGV2ZW50LnRhcmdldC5jaGVja2VkXHJcbiAgICAgIH0pO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHJlbmRlckNhcm91c2VsKCkge1xyXG4gICAgdGhpcy5jYXJvdXNlbCA9IG5ldyBDYXJvdXNlbChzbGlkZXMpO1xyXG5cclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLWNhcm91c2VsLWhvbGRlcl0nKS5hcHBlbmQodGhpcy5jYXJvdXNlbC5lbGVtKTtcclxuICB9XHJcblxyXG4gIHJlbmRlclJpYmJvbigpIHtcclxuICAgIHRoaXMucmliYm9uTWVudSA9IG5ldyBSaWJib25NZW51KGNhdGVnb3JpZXMpO1xyXG5cclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ1tkYXRhLXJpYmJvbi1ob2xkZXJdJykuYXBwZW5kKHRoaXMucmliYm9uTWVudS5lbGVtKTtcclxuICB9XHJcblxyXG4gIHJlbmRlclN0ZXBTbGlkZXIoKSB7XHJcbiAgICB0aGlzLnN0ZXBTbGlkZXIgPSBuZXcgU3RlcFNsaWRlcih7XHJcbiAgICAgIHN0ZXBzOiA1LFxyXG4gICAgICB2YWx1ZTogM1xyXG4gICAgfSk7XHJcblxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtc2xpZGVyLWhvbGRlcl0nKS5hcHBlbmQodGhpcy5zdGVwU2xpZGVyLmVsZW0pO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyQ2FydEljb24oKSB7XHJcbiAgICBsZXQgY2FydEljb25Ib2xkZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1jYXJ0LWljb24taG9sZGVyXScpO1xyXG4gICAgdGhpcy5jYXJ0SWNvbiA9IG5ldyBDYXJ0SWNvbigpO1xyXG5cclxuICAgIGNhcnRJY29uSG9sZGVyLmFwcGVuZCh0aGlzLmNhcnRJY29uLmVsZW0pO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyUHJvZHVjdHNHcmlkKCkge1xyXG4gICAgdGhpcy5wcm9kdWN0c0dyaWQgPSBuZXcgUHJvZHVjdHNHcmlkKHRoaXMucHJvZHVjdHMpO1xyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignW2RhdGEtcHJvZHVjdHMtZ3JpZC1ob2xkZXJdJykuaW5uZXJIVE1MID0gJyc7XHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdbZGF0YS1wcm9kdWN0cy1ncmlkLWhvbGRlcl0nKS5hcHBlbmQodGhpcy5wcm9kdWN0c0dyaWQuZWxlbSk7XHJcbiAgfVxyXG5cclxuICBhc3luYyBmZXRjaFByb2R1Y3RzKCkge1xyXG4gICAgbGV0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJ3Byb2R1Y3RzLmpzb24nKTtcclxuICAgIGxldCBwcm9kdWN0cyA9IGF3YWl0IHJlc3BvbnNlLmpzb24oKTtcclxuXHJcbiAgICByZXR1cm4gcHJvZHVjdHM7XHJcbiAgfVxyXG59XHJcblxyXG5kb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCAoKSA9PiB7XHJcbiAgbGV0IG1haW4gPSBuZXcgTWFpbigpO1xyXG4gIG1haW4ucmVuZGVyKClcclxuICAgIC50aGVuKCgpID0+IGNvbnNvbGUubG9nKCfQodGC0YDQsNC90LjRhtCwINCz0L7RgtC+0LLQsCEnKSk7XHJcbn0pXHJcbiIsImltcG9ydCBjcmVhdGVFbGVtZW50IGZyb20gJy4uLy4uL2Fzc2V0cy9saWIvY3JlYXRlLWVsZW1lbnQuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2Fyb3VzZWwge1xyXG5cclxuICBjb25zdHJ1Y3RvcihzbGlkZXMpIHtcclxuICAgIHRoaXMuc2xpZGVzID0gc2xpZGVzO1xyXG5cclxuICAgIHRoaXMuY3VycmVudFNsaWRlTnVtYmVyID0gMDtcclxuICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICB0aGlzLmVsZW0gPSBjcmVhdGVFbGVtZW50KGBcclxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2Fyb3VzZWxcIj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJvdXNlbF9fYXJyb3cgY2Fyb3VzZWxfX2Fycm93X3JpZ2h0XCI+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPVwiL2Fzc2V0cy9pbWFnZXMvaWNvbnMvYW5nbGUtaWNvbi5zdmdcIiBhbHQ9XCJpY29uXCIgLz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNhcm91c2VsX19hcnJvdyBjYXJvdXNlbF9fYXJyb3dfbGVmdFwiPlxyXG4gICAgICAgICAgICA8aW1nIHNyYz1cIi9hc3NldHMvaW1hZ2VzL2ljb25zL2FuZ2xlLWxlZnQtaWNvbi5zdmdcIiBhbHQ9XCJpY29uXCIgLz5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cImNhcm91c2VsX19pbm5lclwiPjwvZGl2PlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICAgIGApO1xyXG5cclxuICAgIGxldCBzbGlkZXMgPSB0aGlzLnNsaWRlcy5tYXAoaXRlbSA9PiBjcmVhdGVFbGVtZW50KGBcclxuICAgICAgPGRpdiBjbGFzcz1cImNhcm91c2VsX19zbGlkZVwiIGRhdGEtaWQ9XCIke2l0ZW0uaWR9XCI+XHJcbiAgICAgICAgPGltZ1xyXG4gICAgICAgICAgc3JjPVwiL2Fzc2V0cy9pbWFnZXMvY2Fyb3VzZWwvJHtpdGVtLmltYWdlfVwiXHJcbiAgICAgICAgICBjbGFzcz1cImNhcm91c2VsX19pbWdcIlxyXG4gICAgICAgICAgYWx0PVwic2xpZGVcIlxyXG4gICAgICAgIC8+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcm91c2VsX19jYXB0aW9uXCI+XHJcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImNhcm91c2VsX19wcmljZVwiPuKCrCR7aXRlbS5wcmljZS50b0ZpeGVkKDIpfTwvc3Bhbj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJvdXNlbF9fdGl0bGVcIj4ke2l0ZW0ubmFtZX08L2Rpdj5cclxuICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiY2Fyb3VzZWxfX2J1dHRvblwiPlxyXG4gICAgICAgICAgICA8aW1nIHNyYz1cIi9hc3NldHMvaW1hZ2VzL2ljb25zL3BsdXMtaWNvbi5zdmdcIiBhbHQ9XCJpY29uXCIgLz5cclxuICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5gKSk7XHJcblxyXG4gICAgdGhpcy5zdWIoJ2lubmVyJykuYXBwZW5kKC4uLnNsaWRlcyk7XHJcblxyXG4gICAgdGhpcy51cGRhdGUoKTtcclxuICB9XHJcblxyXG4gIGFkZEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5lbGVtLm9uY2xpY2sgPSAoe3RhcmdldH0pID0+IHtcclxuICAgICAgbGV0IGJ1dHRvbiA9IHRhcmdldC5jbG9zZXN0KCcuY2Fyb3VzZWxfX2J1dHRvbicpO1xyXG4gICAgICBpZiAoYnV0dG9uKSB7XHJcbiAgICAgICAgbGV0IGlkID0gdGFyZ2V0LmNsb3Nlc3QoJ1tkYXRhLWlkXScpLmRhdGFzZXQuaWQ7XHJcblxyXG4gICAgICAgIHRoaXMuZWxlbS5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudCgncHJvZHVjdC1hZGQnLCB7XHJcbiAgICAgICAgICBkZXRhaWw6IGlkLFxyXG4gICAgICAgICAgYnViYmxlczogdHJ1ZVxyXG4gICAgICAgIH0pKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHRhcmdldC5jbG9zZXN0KCcuY2Fyb3VzZWxfX2Fycm93X3JpZ2h0JykpIHtcclxuICAgICAgICB0aGlzLm5leHQoKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgaWYgKHRhcmdldC5jbG9zZXN0KCcuY2Fyb3VzZWxfX2Fycm93X2xlZnQnKSkge1xyXG4gICAgICAgIHRoaXMucHJldigpO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgc3ViKHJlZikge1xyXG4gICAgcmV0dXJuIHRoaXMuZWxlbS5xdWVyeVNlbGVjdG9yKGAuY2Fyb3VzZWxfXyR7cmVmfWApO1xyXG4gIH1cclxuXHJcbiAgbmV4dCgpIHtcclxuICAgIHRoaXMuY3VycmVudFNsaWRlTnVtYmVyKys7XHJcbiAgICB0aGlzLnVwZGF0ZSgpO1xyXG4gIH1cclxuXHJcbiAgcHJldigpIHtcclxuICAgIHRoaXMuY3VycmVudFNsaWRlTnVtYmVyLS07XHJcbiAgICB0aGlzLnVwZGF0ZSgpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKCkge1xyXG4gICAgbGV0IG9mZnNldCA9IC10aGlzLmVsZW0ub2Zmc2V0V2lkdGggKiB0aGlzLmN1cnJlbnRTbGlkZU51bWJlcjtcclxuICAgIHRoaXMuc3ViKCdpbm5lcicpLnN0eWxlLnRyYW5zZm9ybSA9IGB0cmFuc2xhdGVYKCR7b2Zmc2V0fXB4KWA7XHJcblxyXG4gICAgaWYgKHRoaXMuY3VycmVudFNsaWRlTnVtYmVyID09IHRoaXMuc2xpZGVzLmxlbmd0aCAtIDEpIHtcclxuICAgICAgdGhpcy5zdWIoJ2Fycm93X3JpZ2h0Jykuc3R5bGUuZGlzcGxheSA9ICdub25lJztcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuc3ViKCdhcnJvd19yaWdodCcpLnN0eWxlLmRpc3BsYXkgPSAnJztcclxuICAgIH1cclxuXHJcbiAgICBpZiAodGhpcy5jdXJyZW50U2xpZGVOdW1iZXIgPT0gMCkge1xyXG4gICAgICB0aGlzLnN1YignYXJyb3dfbGVmdCcpLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnN1YignYXJyb3dfbGVmdCcpLnN0eWxlLmRpc3BsYXkgPSAnJztcclxuICAgIH1cclxuICB9XHJcblxyXG59XHJcbiIsIi8vIGRvZXNuJ3Qgd29yayBmb3IgdGQgYW5kIHNvbWUgb3RoZXIgZWxlbWVudHMgdGhhdCBtYXkgbm90IGJlIHBsYWNlZCBpbnRvIDxkaXY+XHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uKGh0bWwpIHtcclxuICBjb25zdCBkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICBkaXYuaW5uZXJIVE1MID0gaHRtbDtcclxuICByZXR1cm4gZGl2LmZpcnN0RWxlbWVudENoaWxkO1xyXG59O1xyXG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCJleHBvcnQgZGVmYXVsdCBbXHJcbiAge1xyXG4gICAgbmFtZTogJ1BlbmFuZyBzaHJpbXAnLFxyXG4gICAgcHJpY2U6IDE2LFxyXG4gICAgaW1hZ2U6ICdwZW5hbmdfc2hyaW1wLnBuZycsXHJcbiAgICBpZDogJ3BlbmFuZy1zaHJpbXAnXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiAnQ2hpY2tlbiBjYXNoZXcnLFxyXG4gICAgcHJpY2U6IDE0LFxyXG4gICAgaW1hZ2U6ICdjaGlja2VuX2Nhc2hldy5wbmcnLFxyXG4gICAgaWQ6ICdjaGlja2VuLWNhc2hldydcclxuICB9LFxyXG4gIHtcclxuICAgIG5hbWU6ICdSZWQgY3VycnkgdmVnZ2llcycsXHJcbiAgICBwcmljZTogMTIuNSxcclxuICAgIGltYWdlOiAncmVkX2N1cnJ5X3ZlZ2EucG5nJyxcclxuICAgIGlkOiAncmVkLWN1cnJ5LXZlZ2dpZXMnXHJcbiAgfSxcclxuICB7XHJcbiAgICBuYW1lOiAnQ2hpY2tlbiBzcHJpbmdyb2xscycsXHJcbiAgICBwcmljZTogNi41LFxyXG4gICAgaW1hZ2U6ICdjaGlja2VuX2xvZW1waWFzLnBuZycsXHJcbiAgICBpZDogJ2NoaWNrZW4tc3ByaW5ncm9sbHMnXHJcbiAgfVxyXG5dO1xyXG4iLCJpbXBvcnQgY3JlYXRlRWxlbWVudCBmcm9tICcuLi8uLi9hc3NldHMvbGliL2NyZWF0ZS1lbGVtZW50LmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJpYmJvbk1lbnUge1xyXG4gIGNvbnN0cnVjdG9yKGNhdGVnb3JpZXMpIHtcclxuICAgIHRoaXMuY2F0ZWdvcmllcyA9IGNhdGVnb3JpZXM7XHJcblxyXG4gICAgdGhpcy5yZW5kZXIoKTtcclxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgIHRoaXMudmFsdWUgPSAnJztcclxuICB9XHJcblxyXG4gIHJlbmRlcigpIHtcclxuICAgIHRoaXMuZWxlbSA9IGNyZWF0ZUVsZW1lbnQoYFxyXG4gICAgICA8ZGl2IGNsYXNzPVwicmliYm9uXCI+XHJcbiAgICAgICAgPGJ1dHRvbiBjbGFzcz1cInJpYmJvbl9fYXJyb3cgcmliYm9uX19hcnJvd19sZWZ0XCI+XHJcbiAgICAgICAgICA8aW1nIHNyYz1cIi9hc3NldHMvaW1hZ2VzL2ljb25zL2FuZ2xlLWljb24uc3ZnXCIgYWx0PVwiaWNvblwiIC8+XHJcbiAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgPG5hdiBjbGFzcz1cInJpYmJvbl9faW5uZXJcIj48L25hdj5cclxuICAgICAgICA8YnV0dG9uIGNsYXNzPVwicmliYm9uX19hcnJvdyByaWJib25fX2Fycm93X3JpZ2h0IHJpYmJvbl9fYXJyb3dfdmlzaWJsZVwiPlxyXG4gICAgICAgICAgPGltZyBzcmM9XCIvYXNzZXRzL2ltYWdlcy9pY29ucy9hbmdsZS1pY29uLnN2Z1wiIGFsdD1cImljb25cIiAvPlxyXG4gICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIGApO1xyXG5cclxuICAgIGZvciAobGV0IGNhdGVnb3J5IG9mIHRoaXMuY2F0ZWdvcmllcykge1xyXG4gICAgICBsZXQgY2F0ZWdvcnlFbGVtID0gY3JlYXRlRWxlbWVudChgPGEgaHJlZj1cIiNcIiBjbGFzcz1cInJpYmJvbl9faXRlbVwiPjwvYT5gKTtcclxuICAgICAgY2F0ZWdvcnlFbGVtLnRleHRDb250ZW50ID0gY2F0ZWdvcnkubmFtZTsgLy8gaW5zZXJ0IGFzIHRleHQsIG5vdCBhcyBIVE1MIVxyXG4gICAgICBjYXRlZ29yeUVsZW0uZGF0YXNldC5pZCA9IGNhdGVnb3J5LmlkO1xyXG4gICAgICB0aGlzLmVsZW0ucXVlcnlTZWxlY3RvcignLnJpYmJvbl9faW5uZXInKS5hcHBlbmQoY2F0ZWdvcnlFbGVtKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnN1YignaXRlbScpLmNsYXNzTGlzdC5hZGQoJ3JpYmJvbl9faXRlbV9hY3RpdmUnKTtcclxuICB9XHJcblxyXG4gIGFkZEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5zdWIoJ2Fycm93X2xlZnQnKS5vbmNsaWNrID0gKGV2ZW50KSA9PiB0aGlzLm9uQXJyb3dMZWZ0Q2xpY2soZXZlbnQpO1xyXG4gICAgdGhpcy5zdWIoJ2Fycm93X3JpZ2h0Jykub25jbGljayA9IChldmVudCkgPT4gdGhpcy5vbkFycm93UmlnaHRDbGljayhldmVudCk7XHJcblxyXG4gICAgdGhpcy5lbGVtLm9uY2xpY2sgPSAoZXZlbnQpID0+IHtcclxuICAgICAgbGV0IGl0ZW1FbGVtID0gZXZlbnQudGFyZ2V0LmNsb3Nlc3QoJy5yaWJib25fX2l0ZW0nKTtcclxuICAgICAgaWYgKGl0ZW1FbGVtKSB7XHJcbiAgICAgICAgdGhpcy5vbkl0ZW1DbGljayhpdGVtRWxlbSk7XHJcbiAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgfVxyXG4gICAgfTtcclxuXHJcbiAgICB0aGlzLnN1YignaW5uZXInKS5vbnNjcm9sbCA9IChldmVudCkgPT4gdGhpcy5vblNjcm9sbChldmVudCk7XHJcbiAgfVxyXG5cclxuICBvbkFycm93UmlnaHRDbGljayhldmVudCkge1xyXG4gICAgbGV0IG9mZnNldCA9IDM1MDtcclxuICAgIHRoaXMuc3ViKCdpbm5lcicpLnNjcm9sbEJ5KG9mZnNldCwgMCk7XHJcbiAgICB0aGlzLnVwZGF0ZUFycm93cygpO1xyXG4gIH1cclxuXHJcbiAgb25BcnJvd0xlZnRDbGljayhldmVudCkge1xyXG4gICAgbGV0IG9mZnNldCA9IDM1MDtcclxuICAgIHRoaXMuc3ViKCdpbm5lcicpLnNjcm9sbEJ5KC1vZmZzZXQsIDApO1xyXG4gICAgdGhpcy51cGRhdGVBcnJvd3MoKTtcclxuICB9XHJcblxyXG4gIG9uSXRlbUNsaWNrKGl0ZW1FbGVtKSB7XHJcbiAgICBsZXQgb2xkQWN0aXZlID0gdGhpcy5zdWIoJ2l0ZW1fYWN0aXZlJyk7XHJcbiAgICBpZiAob2xkQWN0aXZlKSB7XHJcbiAgICAgIG9sZEFjdGl2ZS5jbGFzc0xpc3QucmVtb3ZlKCdyaWJib25fX2l0ZW1fYWN0aXZlJyk7XHJcbiAgICB9XHJcblxyXG4gICAgaXRlbUVsZW0uY2xhc3NMaXN0LmFkZCgncmliYm9uX19pdGVtX2FjdGl2ZScpO1xyXG5cclxuICAgIHRoaXMudmFsdWUgPSBpdGVtRWxlbS5kYXRhc2V0LmlkO1xyXG5cclxuICAgIHRoaXMuZWxlbS5kaXNwYXRjaEV2ZW50KFxyXG4gICAgICBuZXcgQ3VzdG9tRXZlbnQoJ3JpYmJvbi1zZWxlY3QnLCB7XHJcbiAgICAgICAgZGV0YWlsOiB0aGlzLnZhbHVlLFxyXG4gICAgICAgIGJ1YmJsZXM6IHRydWUsXHJcbiAgICAgIH0pXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgb25TY3JvbGwoZXZlbnQpIHtcclxuICAgIHRoaXMudXBkYXRlQXJyb3dzKCk7XHJcbiAgfVxyXG5cclxuICBzdWIocmVmKSB7XHJcbiAgICByZXR1cm4gdGhpcy5lbGVtLnF1ZXJ5U2VsZWN0b3IoYC5yaWJib25fXyR7cmVmfWApO1xyXG4gIH1cclxuXHJcbiAgc2Nyb2xsUmlnaHQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zdWIoJ2lubmVyJykuc2Nyb2xsV2lkdGggLSAodGhpcy5zdWIoJ2lubmVyJykuc2Nyb2xsTGVmdCArIHRoaXMuc3ViKCdpbm5lcicpLmNsaWVudFdpZHRoKTtcclxuICB9XHJcblxyXG4gIHNjcm9sbExlZnQoKSB7XHJcbiAgICByZXR1cm4gdGhpcy5zdWIoJ2lubmVyJykuc2Nyb2xsTGVmdDtcclxuICB9XHJcblxyXG4gIHVwZGF0ZUFycm93cygpIHtcclxuICAgIGlmICh0aGlzLnNjcm9sbExlZnQoKSA+IDApIHtcclxuICAgICAgdGhpcy5zdWIoJ2Fycm93X2xlZnQnKS5jbGFzc0xpc3QuYWRkKCdyaWJib25fX2Fycm93X3Zpc2libGUnKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMuc3ViKCdhcnJvd19sZWZ0JykuY2xhc3NMaXN0LnJlbW92ZSgncmliYm9uX19hcnJvd192aXNpYmxlJyk7XHJcbiAgICB9XHJcblxyXG4gICAgbGV0IHNjcm9sbFJpZ2h0ID0gdGhpcy5zY3JvbGxSaWdodCgpO1xyXG4gICAgc2Nyb2xsUmlnaHQgPSBzY3JvbGxSaWdodCA8IDEgPyAwIDogc2Nyb2xsUmlnaHQ7IC8vINCt0YLQviDQvdGD0LbQvdC+INC00LvRjyDRgdC40YLRg9Cw0YbQuNC4LCDQutC+0LPQtNCwINGB0LrRgNC+0LvQuyDQv9GA0L7QuNC30L7RiNC10Lsg0YEg0L/QvtCz0YDQtdGI0L3QvtGB0YLRjNGOXHJcbiAgICBpZiAoc2Nyb2xsUmlnaHQgPiAwKSB7XHJcbiAgICAgIHRoaXMuc3ViKCdhcnJvd19yaWdodCcpLmNsYXNzTGlzdC5hZGQoJ3JpYmJvbl9fYXJyb3dfdmlzaWJsZScpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5zdWIoJ2Fycm93X3JpZ2h0JykuY2xhc3NMaXN0LnJlbW92ZSgncmliYm9uX19hcnJvd192aXNpYmxlJyk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxufVxyXG4iLCJleHBvcnQgZGVmYXVsdCBbXHJcbiAge1xyXG4gICAgaWQ6ICcnLFxyXG4gICAgbmFtZTogJ0FsbCdcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnc2FsYWRzJyxcclxuICAgIG5hbWU6ICdTYWxhZHMnXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJ3NvdXBzJyxcclxuICAgIG5hbWU6ICdTb3VwcydcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnY2hpY2tlbi1kaXNoZXMnLFxyXG4gICAgbmFtZTogJ0NoaWNrZW4gZGlzaGVzJ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6ICdiZWVmLWRpc2hlcycsXHJcbiAgICBuYW1lOiAnQmVlZiBkaXNoZXMnXHJcbiAgfSxcclxuICB7XHJcbiAgICBpZDogJ3NlYWZvb2QtZGlzaGVzJyxcclxuICAgIG5hbWU6ICdTZWFmb29kIGRpc2hlcydcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAndmVnZXRhYmxlLWRpc2hlcycsXHJcbiAgICBuYW1lOiAnVmVnZXRhYmxlIGRpc2hlcydcclxuICB9LFxyXG4gIHtcclxuICAgIGlkOiAnYml0cy1hbmQtYml0ZXMnLFxyXG4gICAgbmFtZTogJ0JpdHMgYW5kIGJpdGVzJ1xyXG4gIH0sXHJcbiAge1xyXG4gICAgaWQ6ICdvbi10aGUtc2lkZScsXHJcbiAgICBuYW1lOiAnT24gdGhlIHNpZGUnXHJcbiAgfVxyXG5dO1xyXG4iLCJpbXBvcnQgY3JlYXRlRWxlbWVudCBmcm9tICcuLi8uLi9hc3NldHMvbGliL2NyZWF0ZS1lbGVtZW50LmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0ZXBTbGlkZXIge1xyXG4gIGNvbnN0cnVjdG9yKHsgc3RlcHMsIHZhbHVlID0gMCB9KSB7XHJcbiAgICB0aGlzLnN0ZXBzID0gc3RlcHM7XHJcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcbiAgICB0aGlzLnF1YW50aXR5ID0gdGhpcy5zdGVwcyAtIDE7XHJcbiAgICBcclxuICAgIC8v0KHQvtC30LTQsNC10Lwg0YHQu9Cw0LnQtNC10YAg0Lgg0YPQutCw0LfRi9Cy0LDQtdC8INC/0LXRgNCy0L7QvdCw0YfQsNC70YzQvdGL0LUg0L/QsNGA0LDQvNC10YLRgNGLINC/0L7Qu9C30YPQvdC60LBcclxuICAgIHRoaXMuc3RlcFNsaWRlciA9IGNyZWF0ZUVsZW1lbnQoYDxkaXYgY2xhc3M9XCJzbGlkZXJcIj5cclxuICAgICAgPGRpdiBjbGFzcz1cInNsaWRlcl9fdGh1bWJcIiBzdHlsZT1cImxlZnQ6ICR7KHRoaXMudmFsdWUgLyB0aGlzLnF1YW50aXR5KSAqIDEwMH0lO1wiPlxyXG4gICAgICAgIDxzcGFuIGNsYXNzPVwic2xpZGVyX192YWx1ZVwiPiR7dGhpcy52YWx1ZX08L3NwYW4+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzPVwic2xpZGVyX19wcm9ncmVzc1wiIHN0eWxlPVwid2lkdGg6ICR7KHRoaXMudmFsdWUgLyB0aGlzLnF1YW50aXR5KSAqIDEwMH0lO1wiPjwvZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzPVwic2xpZGVyX19zdGVwc1wiPiR7JzxzcGFuPjwvc3Bhbj4nLnJlcGVhdCh0aGlzLnN0ZXBzKX08L2Rpdj5cclxuICAgIDwvZGl2PmApO1xyXG4gICAgXHJcbiAgICAvL9CS0YvQtNC10LvRj9C10Lwg0L/QtdGA0LLQvtC90LDRh9Cw0LvRjNC90YPRjiDQv9C+0LfQuNGG0LjRjiDQv9C+0LvQt9GD0L3QutCwXHJcbiAgICB0aGlzLnNsaWRlclN0ZXBzID0gdGhpcy5zdGVwU2xpZGVyLnF1ZXJ5U2VsZWN0b3IoJy5zbGlkZXJfX3N0ZXBzJyk7XHJcbiAgICB0aGlzLnNsaWRlclN0ZXBzLmNoaWxkcmVuW3RoaXMudmFsdWVdLmNsYXNzTGlzdC5hZGQoJ3NsaWRlcl9fc3RlcC1hY3RpdmUnKTtcclxuICAgIFxyXG4gICAgLy/QvNC10YLQvtC0INC/0LXRgNC10LzQtdGJ0LXQvdC40Y8g0L/QvtC70LfRg9C90LrQsCDQv9C+INC60LvQuNC60YNcclxuICAgIHRoaXMudGh1bWIgPSB0aGlzLnN0ZXBTbGlkZXIucXVlcnlTZWxlY3RvcignLnNsaWRlcl9fdGh1bWInKTtcclxuICAgIHRoaXMucHJvZ3Jlc3MgPSB0aGlzLnN0ZXBTbGlkZXIucXVlcnlTZWxlY3RvcignLnNsaWRlcl9fcHJvZ3Jlc3MnKTtcclxuICAgIHRoaXMuc2xpZGVyVmFsdWUgPSB0aGlzLnN0ZXBTbGlkZXIucXVlcnlTZWxlY3RvcignLnNsaWRlcl9fdmFsdWUnKTtcclxuICAgIHRoaXMudGh1bWIub25kcmFnc3RhcnQgPSBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgfTtcclxuICAgIHRoaXMudGh1bWIuc3R5bGUudG91Y2hBY3Rpb24gPSAnbm9uZSc7XHJcbiAgICB0aGlzLnRodW1iLm9ucG9pbnRlcmRvd24gPSAoZXZlbnQpID0+IHtcclxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgdGhpcy5zdGVwU2xpZGVyLmNsYXNzTGlzdC5hZGQoJ3NsaWRlcl9kcmFnZ2luZycpO1xyXG4gICAgICB0aGlzLnRodW1iLmFkZEV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgdGhpcy5vblBvaW50ZXJNb3ZlKTtcclxuICAgICAgdGhpcy50aHVtYi5hZGRFdmVudExpc3RlbmVyKCdwb2ludGVydXAnLCB0aGlzLm9uUG9pbnRlclVwKTtcclxuICAgIH07XHJcbiAgICB0aGlzLnN0ZXBTbGlkZXIub25jbGljayA9IChldmVudCkgPT4ge1xyXG4gICAgICBsZXQgbmV3TGVmdCA9IChldmVudC5jbGllbnRYIC0gdGhpcy5zbGlkZXJTdGVwcy5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0KSAvIHRoaXMuc2xpZGVyU3RlcHMub2Zmc2V0V2lkdGg7XHJcbiAgICAgIHRoaXMuc2V0VmFsdWUoTWF0aC5yb3VuZCh0aGlzLnF1YW50aXR5ICogbmV3TGVmdCkpO1xyXG4gICAgICBsZXQgbXlFdmVudCA9IG5ldyBDdXN0b21FdmVudCgnc2xpZGVyLWNoYW5nZScsIHtcclxuICAgICAgICBkZXRhaWw6IHRoaXMudmFsdWUsXHJcbiAgICAgICAgYnViYmxlczogdHJ1ZVxyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy5zdGVwU2xpZGVyLmRpc3BhdGNoRXZlbnQobXlFdmVudCk7XHJcblxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIG9uUG9pbnRlck1vdmUgIChldmVudCkge1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTsgXHJcbiAgICBsZXQgbmV3TGVmdCA9IHRoaXMuY2FsY0xlZnRCeUV2ZW50KGV2ZW50KTtcclxuICAgIFxyXG4gICAgZm9yKCBsZXQgY2hpbGQgb2YgdGhpcy5zbGlkZXJTdGVwcy5jaGlsZHJlbiApIHtcclxuICAgICAgaWYoIGNoaWxkLmNsYXNzTGlzdC5jb250YWlucygnc2xpZGVyX19zdGVwLWFjdGl2ZScpICkgY2hpbGQuY2xhc3NMaXN0LnJlbW92ZSgnc2xpZGVyX19zdGVwLWFjdGl2ZScpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMudmFsdWUgPSBNYXRoLnJvdW5kKG5ld0xlZnQgKiB0aGlzLnF1YW50aXR5KTtcclxuICAgIHRoaXMuc2xpZGVyVmFsdWUudGV4dENvbnRlbnQgPSB0aGlzLnZhbHVlO1xyXG4gICAgXHJcbiAgICB0aGlzLnNsaWRlclN0ZXBzLmNoaWxkcmVuW3RoaXMudmFsdWVdLmNsYXNzTGlzdC5hZGQoJ3NsaWRlcl9fc3RlcC1hY3RpdmUnKTtcclxuICAgIFxyXG4gICAgdGhpcy50aHVtYi5zdHlsZS5sZWZ0ID0gYCR7bmV3TGVmdCAqIDEwMH0lYDtcclxuICAgIHRoaXMucHJvZ3Jlc3Muc3R5bGUud2lkdGggPSBgJHtuZXdMZWZ0ICogMTAwfSVgO1xyXG4gIH1cclxuICBjYWxjTGVmdEJ5RXZlbnQoZXZlbnQpIHtcclxuICAgIGxldCBuZXdMZWZ0ID0gKGV2ZW50LmNsaWVudFggLSB0aGlzLmVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkubGVmdCkgLyB0aGlzLmVsZW0ub2Zmc2V0V2lkdGg7XHJcblxyXG4gICAgaWYgKG5ld0xlZnQgPCAwKSB7IG5ld0xlZnQgPSAwOyB9XHJcbiAgICBpZiAobmV3TGVmdCA+IDEpIHsgbmV3TGVmdCA9IDE7IH1cclxuXHJcbiAgICByZXR1cm4gbmV3TGVmdDtcclxuICB9XHJcblxyXG4gIG9uUG9pbnRlclVwICAoZXZlbnQpICB7XHJcbiAgICB0aGlzLnN0ZXBTbGlkZXIuY2xhc3NMaXN0LnJlbW92ZSgnc2xpZGVyX2RyYWdnaW5nJyk7XHJcbiAgICBcclxuICAgIC8v0YPRgdGC0LDQvdCw0LLQu9C40LLQsNC10Lwg0L/QvtC70LfRg9C90L7QuiDQuCDQv9C+0LvQvtGB0LrRgyDQsiDRgdC+0L7RgtCy0LXRgtGB0YLQstC40Lgg0YEg0LLRi9GB0YfQuNGC0LDQvdC90YvQvCDQv9GA0L7RhtC10L3RgtC+0LxcclxuICAgIHRoaXMudGh1bWIuc3R5bGUubGVmdCA9IGAkeyh0aGlzLnZhbHVlIC8gdGhpcy5xdWFudGl0eSkgKiAxMDB9JWA7XHJcbiAgICB0aGlzLnByb2dyZXNzLnN0eWxlLndpZHRoID0gYCR7KHRoaXMudmFsdWUgLyB0aGlzLnF1YW50aXR5KSAqIDEwMH0lYDtcclxuXHJcbiAgICAvL9Cz0LXQvdC10YDQuNC8INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjNGB0LrQvtC1INGB0L7QsdGL0YLQuNC1XHJcbiAgICBsZXQgbXlFdmVudCA9IG5ldyBDdXN0b21FdmVudCgnc2xpZGVyLWNoYW5nZScsIHtcclxuICAgICAgZGV0YWlsOiB0aGlzLnZhbHVlLFxyXG4gICAgICBidWJibGVzOiB0cnVlXHJcbiAgICB9KTtcclxuICAgIHRoaXMuc3RlcFNsaWRlci5kaXNwYXRjaEV2ZW50KG15RXZlbnQpO1xyXG4gICAgXHJcbiAgICB0aGlzLnRodW1iLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3BvaW50ZXJtb3ZlJywgdGhpcy5vblBvaW50ZXJNb3ZlKTtcclxuICAgIHRoaXMudGh1bWIucmVtb3ZlRXZlbnRMaXN0ZW5lcigncG9pbnRlcnVwJywgdGhpcy5vblBvaW50ZXJVcCk7XHJcbiAgICBcclxuICB9XHJcblxyXG4gIHNldFZhbHVlKHZhbHVlKSB7XHJcbiAgICB0aGlzLnZhbHVlID0gdmFsdWU7XHJcblxyXG4gICAgbGV0IHZhbHVlUGVyY2VudHMgPSAodmFsdWUgLyB0aGlzLnF1YW50aXR5KSAqIDEwMDtcclxuXHJcbiAgICB0aGlzLnRodW1iLnN0eWxlLmxlZnQgPSBgJHt2YWx1ZVBlcmNlbnRzfSVgO1xyXG4gICAgdGhpcy5wcm9ncmVzcy5zdHlsZS53aWR0aCA9IGAke3ZhbHVlUGVyY2VudHN9JWA7XHJcblxyXG4gICAgdGhpcy5zbGlkZXJWYWx1ZS50ZXh0Q29udGVudCA9IHZhbHVlO1xyXG5cclxuICAgIGZvciggbGV0IGNoaWxkIG9mIHRoaXMuc2xpZGVyU3RlcHMuY2hpbGRyZW4gKSB7XHJcbiAgICAgIGlmKCBjaGlsZC5jbGFzc0xpc3QuY29udGFpbnMoJ3NsaWRlcl9fc3RlcC1hY3RpdmUnKSApIGNoaWxkLmNsYXNzTGlzdC5yZW1vdmUoJ3NsaWRlcl9fc3RlcC1hY3RpdmUnKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnNsaWRlclN0ZXBzLmNoaWxkcmVuW3ZhbHVlXS5jbGFzc0xpc3QuYWRkKCdzbGlkZXJfX3N0ZXAtYWN0aXZlJyk7XHJcbiAgfVxyXG5cclxuICBnZXQgZWxlbSgpIHtcclxuICAgIHJldHVybiB0aGlzLnN0ZXBTbGlkZXI7XHJcbiAgfVxyXG59IiwiaW1wb3J0IGNyZWF0ZUVsZW1lbnQgZnJvbSAnLi4vLi4vYXNzZXRzL2xpYi9jcmVhdGUtZWxlbWVudC5qcyc7XHJcbmltcG9ydCBQcm9kdWN0Q2FyZCBmcm9tICcuLi8uLi82LW1vZHVsZS8yLXRhc2svaW5kZXguanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJvZHVjdEdyaWQge1xyXG4gIGNvbnN0cnVjdG9yKHByb2R1Y3RzKSB7XHJcbiAgICB0aGlzLnByb2R1Y3RzID0gcHJvZHVjdHM7XHJcbiAgICB0aGlzLmZpbHRlcnMgPSB7fTtcclxuICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICB0aGlzLmVsZW0gPSBjcmVhdGVFbGVtZW50KGA8ZGl2IGNsYXNzPVwicHJvZHVjdHMtZ3JpZFwiPlxyXG4gICAgICA8ZGl2IGNsYXNzPVwicHJvZHVjdHMtZ3JpZF9faW5uZXJcIj48L2Rpdj5cclxuICAgIDwvZGl2PmApO1xyXG5cclxuICAgIHRoaXMucmVuZGVyQ29udGVudCgpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyQ29udGVudCgpIHtcclxuICAgIHRoaXMuc3ViKCdpbm5lcicpLmlubmVySFRNTCA9ICcnO1xyXG5cclxuICAgIGZvciAobGV0IHByb2R1Y3Qgb2YgdGhpcy5wcm9kdWN0cykge1xyXG4gICAgICBpZiAodGhpcy5maWx0ZXJzLm5vTnV0cyAmJiBwcm9kdWN0Lm51dHMpIHtjb250aW51ZTt9XHJcblxyXG4gICAgICBpZiAodGhpcy5maWx0ZXJzLnZlZ2V0ZXJpYW5Pbmx5ICYmICFwcm9kdWN0LnZlZ2V0ZXJpYW4pIHtjb250aW51ZTt9XHJcblxyXG4gICAgICBpZiAodGhpcy5maWx0ZXJzLm1heFNwaWNpbmVzcyAhPT0gdW5kZWZpbmVkICYmIHByb2R1Y3Quc3BpY2luZXNzID4gdGhpcy5maWx0ZXJzLm1heFNwaWNpbmVzcykge1xyXG4gICAgICAgIGNvbnRpbnVlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAodGhpcy5maWx0ZXJzLmNhdGVnb3J5ICYmIHByb2R1Y3QuY2F0ZWdvcnkgIT0gdGhpcy5maWx0ZXJzLmNhdGVnb3J5KSB7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxldCBjYXJkID0gbmV3IFByb2R1Y3RDYXJkKHByb2R1Y3QpO1xyXG4gICAgICB0aGlzLnN1YihcImlubmVyXCIpLmFwcGVuZChjYXJkLmVsZW0pO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgdXBkYXRlRmlsdGVyKGZpbHRlcnMpIHtcclxuICAgIE9iamVjdC5hc3NpZ24odGhpcy5maWx0ZXJzLCBmaWx0ZXJzKTtcclxuICAgIHRoaXMucmVuZGVyQ29udGVudCgpO1xyXG4gIH1cclxuXHJcbiAgc3ViKHJlZikge1xyXG4gICAgcmV0dXJuIHRoaXMuZWxlbS5xdWVyeVNlbGVjdG9yKGAucHJvZHVjdHMtZ3JpZF9fJHtyZWZ9YCk7XHJcbiAgfVxyXG5cclxufVxyXG4iLCJpbXBvcnQgY3JlYXRlRWxlbWVudCBmcm9tICcuLi8uLi9hc3NldHMvbGliL2NyZWF0ZS1lbGVtZW50LmpzJztcclxuaW1wb3J0IGVzY2FwZUh0bWwgZnJvbSAnLi4vLi4vYXNzZXRzL2xpYi9lc2NhcGUtaHRtbC5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcm9kdWN0Q2FyZCB7XHJcbiAgY29uc3RydWN0b3IocHJvZHVjdCkge1xyXG4gICAgdGhpcy5wcm9kdWN0ID0gcHJvZHVjdDtcclxuICAgIHRoaXMucmVuZGVyKCk7XHJcbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICB0aGlzLmVsZW0gPSBjcmVhdGVFbGVtZW50KGA8ZGl2IGNsYXNzPVwiY2FyZFwiPlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZF9fdG9wXCI+XHJcbiAgICAgICAgPGltZ1xyXG4gICAgICAgICAgc3JjPVwiL2Fzc2V0cy9pbWFnZXMvcHJvZHVjdHMvJHt0aGlzLnByb2R1Y3QuaW1hZ2V9XCJcclxuICAgICAgICAgIGNsYXNzPVwiY2FyZF9faW1hZ2VcIlxyXG4gICAgICAgICAgYWx0PVwicHJvZHVjdFwiXHJcbiAgICAgICAgLz5cclxuICAgICAgICA8c3BhbiBjbGFzcz1cImNhcmRfX3ByaWNlXCI+4oKsJHt0aGlzLnByb2R1Y3QucHJpY2UudG9GaXhlZCgyKX08L3NwYW4+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiY2FyZF9fYm9keVwiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJkX190aXRsZVwiPiR7ZXNjYXBlSHRtbCh0aGlzLnByb2R1Y3QubmFtZSl9PC9kaXY+XHJcbiAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJjYXJkX19idXR0b25cIj5cclxuICAgICAgICAgIDxpbWcgc3JjPVwiL2Fzc2V0cy9pbWFnZXMvaWNvbnMvcGx1cy1pY29uLnN2Z1wiIGFsdD1cImljb25cIiAvPlxyXG4gICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZGl2PmApO1xyXG4gIH1cclxuXHJcbiAgYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB0aGlzLmVsZW0ub25jbGljayA9IChldmVudCkgPT4gdGhpcy5vbkNsaWNrKGV2ZW50KTtcclxuICB9XHJcblxyXG4gIG9uQ2xpY2soZXZlbnQpIHtcclxuICAgIHRoaXMuZWxlbS5kaXNwYXRjaEV2ZW50KG5ldyBDdXN0b21FdmVudChcInByb2R1Y3QtYWRkXCIsIHtcclxuICAgICAgZGV0YWlsOiB0aGlzLnByb2R1Y3QuaWQsXHJcbiAgICAgIGJ1YmJsZXM6IHRydWVcclxuICAgIH0pKTtcclxuICB9XHJcbn1cclxuIiwiZXhwb3J0IGRlZmF1bHQgc3RyaW5nID0+IEFycmF5LmZyb20oc3RyaW5nKS5tYXAoY2hhciA9PiB7XHJcbiAgc3dpdGNoKGNoYXIpIHtcclxuICAgIGNhc2UgJyYnOlxyXG4gICAgICByZXR1cm4gJyZhbXA7JztcclxuICAgIGNhc2UgJ1wiJzpcclxuICAgICAgcmV0dXJuICcmcXVvdDsnO1xyXG4gICAgY2FzZSAnXFwnJzpcclxuICAgICAgcmV0dXJuICcmIzM5Oyc7XHJcbiAgICBjYXNlICc8JzpcclxuICAgICAgcmV0dXJuICcmbHQ7JztcclxuICAgIGNhc2UgJz4nOlxyXG4gICAgICByZXR1cm4gJyZndDsnO1xyXG4gICAgZGVmYXVsdDpcclxuICAgICAgcmV0dXJuIGNoYXI7XHJcbiAgfVxyXG59KS5qb2luKCcnKTsiLCJpbXBvcnQgY3JlYXRlRWxlbWVudCBmcm9tICcuLi8uLi9hc3NldHMvbGliL2NyZWF0ZS1lbGVtZW50LmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcnRJY29uIHtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMucmVuZGVyKCk7XHJcblxyXG4gICAgdGhpcy5hZGRFdmVudExpc3RlbmVycygpO1xyXG4gIH1cclxuXHJcbiAgcmVuZGVyKCkge1xyXG4gICAgdGhpcy5lbGVtID0gY3JlYXRlRWxlbWVudCgnPGRpdiBjbGFzcz1cImNhcnQtaWNvblwiPjwvZGl2PicpO1xyXG4gIH1cclxuXHJcbiAgdXBkYXRlKGNhcnQpIHtcclxuICAgIGlmICghY2FydC5pc0VtcHR5KCkpIHtcclxuICAgICAgdGhpcy5lbGVtLmNsYXNzTGlzdC5hZGQoJ2NhcnQtaWNvbl92aXNpYmxlJyk7XHJcblxyXG4gICAgICB0aGlzLmVsZW0uaW5uZXJIVE1MID0gYFxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJ0LWljb25fX2lubmVyXCI+XHJcbiAgICAgICAgICA8c3BhbiBjbGFzcz1cImNhcnQtaWNvbl9fY291bnRcIj4ke2NhcnQuZ2V0VG90YWxDb3VudCgpfTwvc3Bhbj5cclxuICAgICAgICAgIDxzcGFuIGNsYXNzPVwiY2FydC1pY29uX19wcmljZVwiPuKCrCR7Y2FydC5nZXRUb3RhbFByaWNlKCkudG9GaXhlZCgyKX08L3NwYW4+XHJcbiAgICAgICAgPC9kaXY+YDtcclxuXHJcbiAgICAgIHRoaXMudXBkYXRlUG9zaXRpb24oKTtcclxuXHJcbiAgICAgIHRoaXMuZWxlbS5jbGFzc0xpc3QuYWRkKCdzaGFrZScpO1xyXG4gICAgICB0aGlzLmVsZW0uYWRkRXZlbnRMaXN0ZW5lcigndHJhbnNpdGlvbmVuZCcsICgpID0+IHtcclxuICAgICAgICB0aGlzLmVsZW0uY2xhc3NMaXN0LnJlbW92ZSgnc2hha2UnKTtcclxuICAgICAgfSwge29uY2U6IHRydWV9KTtcclxuXHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLmVsZW0uY2xhc3NMaXN0LnJlbW92ZSgnY2FydC1pY29uX3Zpc2libGUnKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHVwZGF0ZVBvc2l0aW9uKCkge1xyXG5cclxuICAgIGlmICghdGhpcy5lbGVtLm9mZnNldEhlaWdodCkge3JldHVybjt9IC8vIG5vdCB2aXNpYmxlXHJcblxyXG4gICAgaWYgKCF0aGlzLmluaXRpYWxUb3BDb29yZCkge1xyXG4gICAgICB0aGlzLmluaXRpYWxUb3BDb29yZCA9IHRoaXMuZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS50b3AgKyB3aW5kb3cucGFnZVlPZmZzZXQ7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCA8PSA3NjcpIHtcclxuICAgICAgLy8gbW9iaWxlOiBjYXJ0IGlzIGFsd2F5cyBmaXhlZFxyXG4gICAgICB0aGlzLnJlc2V0UG9zaXRpb24oKTtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIGxldCBpc0hlYWRlckNhcnRTY3JvbGxlZCA9IHdpbmRvdy5wYWdlWU9mZnNldCA+IHRoaXMuaW5pdGlhbFRvcENvb3JkO1xyXG5cclxuICAgIGlmIChpc0hlYWRlckNhcnRTY3JvbGxlZCkge1xyXG4gICAgICB0aGlzLmZpeFBvc2l0aW9uKCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnJlc2V0UG9zaXRpb24oKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZpeFBvc2l0aW9uKCkge1xyXG4gICAgT2JqZWN0LmFzc2lnbih0aGlzLmVsZW0uc3R5bGUsIHtcclxuICAgICAgcG9zaXRpb246ICdmaXhlZCcsXHJcbiAgICAgIHRvcDogJzUwcHgnLFxyXG4gICAgICB6SW5kZXg6IDFlMyxcclxuICAgICAgbGVmdDogTWF0aC5taW4oXHJcbiAgICAgICAgLy8g0YHQv9GA0LDQstCwINC+0YIg0YHQvtC00LXRgNC20LjQvNC+0LPQviAo0L7Qv9GA0LXQtNC10LvRj9C10Lwg0L/QviDQv9C10YDQstC+0LzRgyDQutC+0L3RgtC10LnQvdC10YDRgyDQsiDQvdCw0YjQtdC5INCy0ZHRgNGB0YLQutC1KVxyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb250YWluZXInKS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5yaWdodCArIDIwLFxyXG4gICAgICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aCAtIHRoaXMuZWxlbS5vZmZzZXRXaWR0aCAtIDEwXHJcbiAgICAgICkgKyAncHgnXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIHJlc2V0UG9zaXRpb24oKSB7XHJcbiAgICBPYmplY3QuYXNzaWduKHRoaXMuZWxlbS5zdHlsZSwge1xyXG4gICAgICBwb3NpdGlvbjogJycsXHJcbiAgICAgIHRvcDogJycsXHJcbiAgICAgIGxlZnQ6ICcnLFxyXG4gICAgICB6SW5kZXg6ICcnXHJcbiAgICB9KTtcclxuICB9XHJcblxyXG4gIGFkZEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgKCkgPT4gdGhpcy51cGRhdGVQb3NpdGlvbigpKTtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCAoKSA9PiB0aGlzLnVwZGF0ZVBvc2l0aW9uKCkpO1xyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgY3JlYXRlRWxlbWVudCBmcm9tICcuLi8uLi9hc3NldHMvbGliL2NyZWF0ZS1lbGVtZW50LmpzJztcclxuaW1wb3J0IGVzY2FwZUh0bWwgZnJvbSAnLi4vLi4vYXNzZXRzL2xpYi9lc2NhcGUtaHRtbC5qcyc7XHJcblxyXG5pbXBvcnQgTW9kYWwgZnJvbSAnLi4vLi4vNy1tb2R1bGUvMi10YXNrL2luZGV4LmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENhcnQge1xyXG4gIC8vIGNhcnRJdGVtcyA9IFtdOyAvLyBbcHJvZHVjdDogey4uLn0sIGNvdW50OiBOXVxyXG5cclxuICBjb25zdHJ1Y3RvcihjYXJ0SWNvbikge1xyXG4gICAgdGhpcy5jYXJ0SWNvbiA9IGNhcnRJY29uO1xyXG4gICAgdGhpcy5jYXJ0SXRlbXMgPSBbXTtcclxuICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcnMoKTtcclxuICB9XHJcblxyXG4gIGFkZFByb2R1Y3QocHJvZHVjdCkge1xyXG4gICAgaWYoICFwcm9kdWN0IHx8IHByb2R1Y3QgPT09IG51bGwgKSByZXR1cm47XHJcbiAgIFxyXG4gICAgbGV0IHJlenVsdCA9IHRoaXMuY2FydEl0ZW1zLmZpbmQoIGl0ZW0gPT4gaXRlbS5wcm9kdWN0LmlkID09IHByb2R1Y3QuaWQgKTtcclxuICAgIGlmKCByZXp1bHQgKSByZXp1bHQuY291bnQgKz0gMTtcclxuICAgIGVsc2UgdGhpcy5jYXJ0SXRlbXMucHVzaCh7cHJvZHVjdDogcHJvZHVjdCwgY291bnQ6IDF9KTtcclxuXHJcbiAgICB0aGlzLm9uUHJvZHVjdFVwZGF0ZSh0aGlzLmNhcnRJdGVtcyk7XHJcbiAgfVxyXG5cclxuICB1cGRhdGVQcm9kdWN0Q291bnQocHJvZHVjdElkLCBhbW91bnQpIHtcclxuICAgIGxldCBmaW5kUHJvZHVjdCA9IHRoaXMuY2FydEl0ZW1zLmZpbmQoIGl0ZW0gPT4gaXRlbS5wcm9kdWN0LmlkID09IHByb2R1Y3RJZCApO1xyXG4gICAgbGV0IGluZGV4ID0gdGhpcy5jYXJ0SXRlbXMuaW5kZXhPZihmaW5kUHJvZHVjdCk7XHJcbiAgXHJcbiAgICBpZiggZmluZFByb2R1Y3QuY291bnQgPT0gMSAmJiBhbW91bnQgPT0gLTEgKSB7XHJcbiAgICAgIGxldCBwcm9kdWN0ID0gdGhpcy5mcm9tQm9keS5xdWVyeVNlbGVjdG9yKGBbZGF0YS1wcm9kdWN0LWlkPVwiJHtwcm9kdWN0SWR9XCJdYCk7XHJcbiAgICAgIHByb2R1Y3QucmVtb3ZlKCk7XHJcbiAgICAgIGxldCBpbmZvUHJpY2UgPSB0aGlzLmZyb21Cb2R5LnF1ZXJ5U2VsZWN0b3IoJy5jYXJ0LWJ1dHRvbnNfX2luZm8tcHJpY2UnKTtcclxuICAgICAgdGhpcy5jYXJ0SXRlbXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICAgICAgaW5mb1ByaWNlLmlubmVySFRNTCA9IGDigqwke3RoaXMuZ2V0VG90YWxQcmljZSgpLnRvRml4ZWQoMil9YDtcclxuICAgICAgaWYoIHRoaXMuaXNFbXB0eSgpICkgdGhpcy5tb2RhbFdpbmRvdy5jbG9zZSgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgZmluZFByb2R1Y3QuY291bnQgKz0gYW1vdW50O1xyXG4gICAgICBjb25zb2xlLmxvZyhmaW5kUHJvZHVjdCk7XHJcbiAgICAgIFxyXG4gICAgICB0aGlzLm9uUHJvZHVjdFVwZGF0ZShmaW5kUHJvZHVjdCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBpc0VtcHR5KCkge1xyXG4gICAgaWYoIHRoaXMuY2FydEl0ZW1zLmxlbmd0aCAhPSAwICkgcmV0dXJuIGZhbHNlO1xyXG4gICAgZWxzZSByZXR1cm4gdHJ1ZTtcclxuICB9XHJcblxyXG4gIGdldFRvdGFsQ291bnQoKSB7XHJcbiAgICBsZXQgdG90YWxDb3VudCA9IHRoaXMuY2FydEl0ZW1zLnJlZHVjZSgoc3VtLCBjdXJyZW50KSA9PiBzdW0gKyBjdXJyZW50LmNvdW50LCAwKTtcclxuICAgIHJldHVybiB0b3RhbENvdW50O1xyXG4gIH1cclxuXHJcbiAgZ2V0VG90YWxQcmljZSgpIHtcclxuICAgIGxldCB0b3RhbFByaWNlID0gdGhpcy5jYXJ0SXRlbXMucmVkdWNlKChzdW0sIGN1cnJlbnQpID0+IHN1bSArIGN1cnJlbnQucHJvZHVjdC5wcmljZSAqIGN1cnJlbnQuY291bnQsIDApO1xyXG4gICAgcmV0dXJuIHRvdGFsUHJpY2U7XHJcbiAgfVxyXG5cclxuICByZW5kZXJQcm9kdWN0KHByb2R1Y3QsIGNvdW50KSB7XHJcbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudChgXHJcbiAgICA8ZGl2IGNsYXNzPVwiY2FydC1wcm9kdWN0XCIgZGF0YS1wcm9kdWN0LWlkPVwiJHtcclxuICAgICAgcHJvZHVjdC5pZFxyXG4gICAgfVwiPlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiY2FydC1wcm9kdWN0X19pbWdcIj5cclxuICAgICAgICA8aW1nIHNyYz1cIi9hc3NldHMvaW1hZ2VzL3Byb2R1Y3RzLyR7cHJvZHVjdC5pbWFnZX1cIiBhbHQ9XCJwcm9kdWN0XCI+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgICA8ZGl2IGNsYXNzPVwiY2FydC1wcm9kdWN0X19pbmZvXCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cImNhcnQtcHJvZHVjdF9fdGl0bGVcIj4ke2VzY2FwZUh0bWwocHJvZHVjdC5uYW1lKX08L2Rpdj5cclxuICAgICAgICA8ZGl2IGNsYXNzPVwiY2FydC1wcm9kdWN0X19wcmljZS13cmFwXCI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FydC1jb3VudGVyXCI+XHJcbiAgICAgICAgICAgIDxidXR0b24gdHlwZT1cImJ1dHRvblwiIGNsYXNzPVwiY2FydC1jb3VudGVyX19idXR0b24gY2FydC1jb3VudGVyX19idXR0b25fbWludXNcIj5cclxuICAgICAgICAgICAgICA8aW1nIHNyYz1cIi9hc3NldHMvaW1hZ2VzL2ljb25zL3NxdWFyZS1taW51cy1pY29uLnN2Z1wiIGFsdD1cIm1pbnVzXCI+XHJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8c3BhbiBjbGFzcz1cImNhcnQtY291bnRlcl9fY291bnRcIj4ke2NvdW50fTwvc3Bhbj5cclxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJjYXJ0LWNvdW50ZXJfX2J1dHRvbiBjYXJ0LWNvdW50ZXJfX2J1dHRvbl9wbHVzXCI+XHJcbiAgICAgICAgICAgICAgPGltZyBzcmM9XCIvYXNzZXRzL2ltYWdlcy9pY29ucy9zcXVhcmUtcGx1cy1pY29uLnN2Z1wiIGFsdD1cInBsdXNcIj5cclxuICAgICAgICAgICAgPC9idXR0b24+XHJcbiAgICAgICAgICA8L2Rpdj5cclxuICAgICAgICAgIDxkaXYgY2xhc3M9XCJjYXJ0LXByb2R1Y3RfX3ByaWNlXCI+4oKsJHtwcm9kdWN0LnByaWNlLnRvRml4ZWQoMil9PC9kaXY+XHJcbiAgICAgICAgPC9kaXY+XHJcbiAgICAgIDwvZGl2PlxyXG4gICAgPC9kaXY+YCk7XHJcbiAgfVxyXG5cclxuICByZW5kZXJPcmRlckZvcm0oKSB7XHJcbiAgICByZXR1cm4gY3JlYXRlRWxlbWVudChgPGZvcm0gY2xhc3M9XCJjYXJ0LWZvcm1cIj5cclxuICAgICAgPGg1IGNsYXNzPVwiY2FydC1mb3JtX190aXRsZVwiPkRlbGl2ZXJ5PC9oNT5cclxuICAgICAgPGRpdiBjbGFzcz1cImNhcnQtZm9ybV9fZ3JvdXAgY2FydC1mb3JtX19ncm91cF9yb3dcIj5cclxuICAgICAgICA8aW5wdXQgbmFtZT1cIm5hbWVcIiB0eXBlPVwidGV4dFwiIGNsYXNzPVwiY2FydC1mb3JtX19pbnB1dFwiIHBsYWNlaG9sZGVyPVwiTmFtZVwiIHJlcXVpcmVkIHZhbHVlPVwiU2FudGEgQ2xhdXNcIj5cclxuICAgICAgICA8aW5wdXQgbmFtZT1cImVtYWlsXCIgdHlwZT1cImVtYWlsXCIgY2xhc3M9XCJjYXJ0LWZvcm1fX2lucHV0XCIgcGxhY2Vob2xkZXI9XCJFbWFpbFwiIHJlcXVpcmVkIHZhbHVlPVwiam9obkBnbWFpbC5jb21cIj5cclxuICAgICAgICA8aW5wdXQgbmFtZT1cInRlbFwiIHR5cGU9XCJ0ZWxcIiBjbGFzcz1cImNhcnQtZm9ybV9faW5wdXRcIiBwbGFjZWhvbGRlcj1cIlBob25lXCIgcmVxdWlyZWQgdmFsdWU9XCIrMTIzNDU2N1wiPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGRpdiBjbGFzcz1cImNhcnQtZm9ybV9fZ3JvdXBcIj5cclxuICAgICAgICA8aW5wdXQgbmFtZT1cImFkZHJlc3NcIiB0eXBlPVwidGV4dFwiIGNsYXNzPVwiY2FydC1mb3JtX19pbnB1dFwiIHBsYWNlaG9sZGVyPVwiQWRkcmVzc1wiIHJlcXVpcmVkIHZhbHVlPVwiTm9ydGgsIExhcGxhbmQsIFNub3cgSG9tZVwiPlxyXG4gICAgICA8L2Rpdj5cclxuICAgICAgPGRpdiBjbGFzcz1cImNhcnQtYnV0dG9uc1wiPlxyXG4gICAgICAgIDxkaXYgY2xhc3M9XCJjYXJ0LWJ1dHRvbnNfX2J1dHRvbnMgYnRuLWdyb3VwXCI+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwiY2FydC1idXR0b25zX19pbmZvXCI+XHJcbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwiY2FydC1idXR0b25zX19pbmZvLXRleHRcIj50b3RhbDwvc3Bhbj5cclxuICAgICAgICAgICAgPHNwYW4gY2xhc3M9XCJjYXJ0LWJ1dHRvbnNfX2luZm8tcHJpY2VcIj7igqwke3RoaXMuZ2V0VG90YWxQcmljZSgpLnRvRml4ZWQoXHJcbiAgICAgICAgICAgICAgMlxyXG4gICAgICAgICAgICApfTwvc3Bhbj5cclxuICAgICAgICAgIDwvZGl2PlxyXG4gICAgICAgICAgPGJ1dHRvbiB0eXBlPVwic3VibWl0XCIgY2xhc3M9XCJjYXJ0LWJ1dHRvbnNfX2J1dHRvbiBidG4tZ3JvdXBfX2J1dHRvbiBidXR0b25cIj5vcmRlcjwvYnV0dG9uPlxyXG4gICAgICAgIDwvZGl2PlxyXG4gICAgICA8L2Rpdj5cclxuICAgIDwvZm9ybT5gKTtcclxuICB9XHJcblxyXG4gIHJlbmRlck1vZGFsKCkge1xyXG4gICAgdGhpcy5tb2RhbFdpbmRvdyA9IG5ldyBNb2RhbCgpO1xyXG4gICAgdGhpcy5tb2RhbFdpbmRvdy5zZXRUaXRsZSgnWW91ciBvcmRlcicpO1xyXG4gICAgdGhpcy5mcm9tQm9keSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gICAgZm9yKCBsZXQgcHJvZHVjdCBvZiB0aGlzLmNhcnRJdGVtcyApIHtcclxuICAgICAgbGV0IGl0ZW0gPSB0aGlzLnJlbmRlclByb2R1Y3QocHJvZHVjdC5wcm9kdWN0LCBwcm9kdWN0LmNvdW50KTtcclxuICAgICAgdGhpcy5mcm9tQm9keS5hcHBlbmQoaXRlbSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmZyb21Cb2R5LmFwcGVuZCh0aGlzLnJlbmRlck9yZGVyRm9ybSgpKTtcclxuICAgIFxyXG4gICAgdGhpcy5tb2RhbFdpbmRvdy5zZXRCb2R5KHRoaXMuZnJvbUJvZHkpO1xyXG4gICAgXHJcbiAgICB0aGlzLm1vZGFsV2luZG93Lm9wZW4oKTtcclxuXHJcbiAgICB0aGlzLmZyb21Cb2R5LmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKGV2ZW50KSA9PiB7XHJcbiAgICAgIGxldCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XHJcbiAgICAgIGNvbnN0IHByb2R1Y3QgPSB0YXJnZXQuY2xvc2VzdCgnLmNhcnQtcHJvZHVjdCcpO1xyXG4gICAgICBjb25zb2xlLmxvZyhwcm9kdWN0KTtcclxuICAgICAgbGV0IGlkUHJvZHVjdCA9IHByb2R1Y3QuZGF0YXNldC5wcm9kdWN0SWQ7XHJcbiAgICAgIGNvbnNvbGUubG9nKGlkUHJvZHVjdCk7XHJcbiAgICAgIGxldCBhbW91bnQgPSAwO1xyXG4gICAgICBpZiggdGFyZ2V0LmNsb3Nlc3QoJy5jYXJ0LWNvdW50ZXJfX2J1dHRvbl9taW51cycpICkgYW1vdW50IC09IDE7XHJcbiAgICAgIGlmKCB0YXJnZXQuY2xvc2VzdCgnLmNhcnQtY291bnRlcl9fYnV0dG9uX3BsdXMnKSApIGFtb3VudCArPSAxO1xyXG4gICAgXHJcbiAgICAgIHRoaXMudXBkYXRlUHJvZHVjdENvdW50KGlkUHJvZHVjdCwgYW1vdW50KTtcclxuICAgIH0pO1xyXG5cclxuICAgIGxldCBmb3JtID0gdGhpcy5mcm9tQm9keS5xdWVyeVNlbGVjdG9yKCcuY2FydC1mb3JtJyk7XHJcbiAgICBmb3JtLmFkZEV2ZW50TGlzdGVuZXIoJ3N1Ym1pdCcsIHRoaXMub25TdWJtaXQpO1xyXG5cclxuICB9XHJcblxyXG4gIG9uUHJvZHVjdFVwZGF0ZShjYXJ0SXRlbSkge1xyXG4gICAgdGhpcy5jYXJ0SWNvbi51cGRhdGUodGhpcyk7XHJcbiAgICBpZiggIWRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LmNvbnRhaW5zKCdpcy1tb2RhbC1vcGVuJykgKSByZXR1cm47XHJcbiAgICBsZXQgcHJvZHVjdElkID0gY2FydEl0ZW0ucHJvZHVjdC5pZDtcclxuICAgIGxldCBwcm9kdWN0Q291bnQgPSB0aGlzLmZyb21Cb2R5LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXByb2R1Y3QtaWQ9XCIke3Byb2R1Y3RJZH1cIl0gLmNhcnQtY291bnRlcl9fY291bnRgKTtcclxuICAgIGxldCBwcm9kdWN0UHJpY2UgPSB0aGlzLmZyb21Cb2R5LnF1ZXJ5U2VsZWN0b3IoYFtkYXRhLXByb2R1Y3QtaWQ9XCIke3Byb2R1Y3RJZH1cIl0gLmNhcnQtcHJvZHVjdF9fcHJpY2VgKTtcclxuICAgIFxyXG4gICAgXHJcbiAgICBsZXQgaW5mb1ByaWNlID0gdGhpcy5mcm9tQm9keS5xdWVyeVNlbGVjdG9yKCcuY2FydC1idXR0b25zX19pbmZvLXByaWNlJyk7XHJcblxyXG4gICAgcHJvZHVjdENvdW50LmlubmVySFRNTCA9IGNhcnRJdGVtLmNvdW50O1xyXG5cclxuICAgIHByb2R1Y3RQcmljZS5pbm5lckhUTUwgPSBg4oKsJHsoY2FydEl0ZW0uY291bnQgKiBjYXJ0SXRlbS5wcm9kdWN0LnByaWNlKS50b0ZpeGVkKDIpfWA7XHJcbiAgICBcclxuICAgIGluZm9QcmljZS5pbm5lckhUTUwgPSBg4oKsJHt0aGlzLmdldFRvdGFsUHJpY2UoKS50b0ZpeGVkKDIpfWA7XHJcbiAgICBcclxuICB9XHJcblxyXG4gIG9uU3VibWl0IChldmVudCkge1xyXG4gICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgIGxldCB0YXJnZXQgPSBldmVudC50YXJnZXQ7XHJcbiAgICBsZXQgbW9kYWxXaW5kID0gdGFyZ2V0LmNsb3Nlc3QoJy5tb2RhbCcpO1xyXG4gICAgbGV0IG1vZGFsVGl0bGUgPSBtb2RhbFdpbmQucXVlcnlTZWxlY3RvcignLm1vZGFsX190aXRsZScpO1xyXG4gICAgbGV0IGZvcm0gPSB0YXJnZXQuY2xvc2VzdCgnLmNhcnQtZm9ybScpO1xyXG4gICAgbGV0IGJ1dHRvbiA9IHRhcmdldC5xdWVyeVNlbGVjdG9yKCdidXR0b24nKTtcclxuICAgIGxldCBjYXJJdGVtcyA9IHRoaXMuY2FydEl0ZW1zO1xyXG4gICAgbGV0IGJvZHlNb2RhbFdpbmQgPSBtb2RhbFdpbmQucXVlcnlTZWxlY3RvcignLm1vZGFsX19ib2R5Jyk7XHJcbiAgICBpZiggIWJ1dHRvbi5oYXNBdHRyaWJ1dGUoJ3R5cGUnKSApIHJldHVybjtcclxuICAgIFxyXG4gICAgYnV0dG9uLmNsYXNzTGlzdC5hZGQoJ2lzLWxvYWRpbmcnKTtcclxuICAgIGZldGNoKCdodHRwczovL2h0dHBiaW4ub3JnL3Bvc3QnLCB7XHJcbiAgICAgIG1ldGhvZDogJ1BPU1QnLFxyXG4gICAgICBib2R5OiBuZXcgRm9ybURhdGEoZm9ybSlcclxuICAgIH0pXHJcbiAgICAudGhlbiggZnVuY3Rpb24ocmVzcG9uc2UpIHtcclxuICAgICAgXHJcbiAgICAgIGlmKCByZXNwb25zZS5vayApIHtcclxuXHJcbiAgICAgICAgbW9kYWxUaXRsZS5pbm5lckhUTUwgPSAnU3VjY2VzcyEnO1xyXG4gICAgICAgIGNhckl0ZW1zLnNwbGljZSgwLCBjYXJJdGVtcy5sZW5ndGgpO1xyXG4gICAgICAgIGJvZHlNb2RhbFdpbmQuaW5uZXJIVE1MID0gYDxkaXYgY2xhc3M9XCJtb2RhbF9fYm9keS1pbm5lclwiPlxyXG4gICAgICAgICAgPHA+XHJcbiAgICAgICAgICAgIE9yZGVyIHN1Y2Nlc3NmdWwhIFlvdXIgb3JkZXIgaXMgYmVpbmcgY29va2VkIDopIDxicj5cclxuICAgICAgICAgICAgV2XigJlsbCBub3RpZnkgeW91IGFib3V0IGRlbGl2ZXJ5IHRpbWUgc2hvcnRseS48YnI+XHJcbiAgICAgICAgICAgIDxpbWcgc3JjPVwiL2Fzc2V0cy9pbWFnZXMvZGVsaXZlcnkuZ2lmXCI+XHJcbiAgICAgICAgICA8L3A+XHJcbiAgICAgICAgPC9kaXY+YDtcclxuICAgICAgfVxyXG5cclxuICAgICAgZWxzZSBhbGVydChgSFRUUCAtIEVycm9yOiAke3Jlc3BvbnNlLnN0YXR1c31gKTtcclxuICAgIH0pO1xyXG4gICAgXHJcbiAgfTtcclxuXHJcbiAgYWRkRXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICB0aGlzLmNhcnRJY29uLmVsZW0ub25jbGljayA9ICgpID0+IHRoaXMucmVuZGVyTW9kYWwoKTtcclxuICB9XHJcblxyXG59IiwiaW1wb3J0IGNyZWF0ZUVsZW1lbnQgZnJvbSAnLi4vLi4vYXNzZXRzL2xpYi9jcmVhdGUtZWxlbWVudC5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNb2RhbCB7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLnJlbmRlcigpO1xyXG5cclxuICAgIHRoaXMuZWxlbS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIChldmVudCkgPT4gdGhpcy5vbkNsaWNrKGV2ZW50KSk7XHJcbiAgfVxyXG5cclxuICByZW5kZXIoKSB7XHJcbiAgICB0aGlzLmVsZW0gPSBjcmVhdGVFbGVtZW50KGBcclxuICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsXCI+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsX19vdmVybGF5XCI+PC9kaXY+XHJcbiAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsX19pbm5lclwiPlxyXG4gICAgICAgICAgPGRpdiBjbGFzcz1cIm1vZGFsX19oZWFkZXJcIj5cclxuICAgICAgICAgICAgPGJ1dHRvbiB0eXBlPVwiYnV0dG9uXCIgY2xhc3M9XCJtb2RhbF9fY2xvc2VcIj5cclxuICAgICAgICAgICAgICA8aW1nIHNyYz1cIi9hc3NldHMvaW1hZ2VzL2ljb25zL2Nyb3NzLWljb24uc3ZnXCIgYWx0PVwiY2xvc2UtaWNvblwiIC8+XHJcbiAgICAgICAgICAgIDwvYnV0dG9uPlxyXG4gICAgICAgICAgICA8aDMgY2xhc3M9XCJtb2RhbF9fdGl0bGVcIj48L2gzPlxyXG4gICAgICAgICAgPC9kaXY+XHJcbiAgICAgICAgICA8ZGl2IGNsYXNzPVwibW9kYWxfX2JvZHlcIj48L2Rpdj5cclxuICAgICAgICA8L2Rpdj5cclxuICAgICAgPC9kaXY+XHJcbiAgICBgKTtcclxuICB9XHJcblxyXG4gIHN1YihyZWYpIHtcclxuICAgIHJldHVybiB0aGlzLmVsZW0ucXVlcnlTZWxlY3RvcihgLm1vZGFsX18ke3JlZn1gKTtcclxuICB9XHJcblxyXG4gIG9wZW4oKSB7XHJcbiAgICBkb2N1bWVudC5ib2R5LmFwcGVuZCh0aGlzLmVsZW0pO1xyXG4gICAgZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKCdpcy1tb2RhbC1vcGVuJyk7XHJcblxyXG4gICAgdGhpcy5fa2V5ZG93bkV2ZW50TGlzdGVuZXIgPSAoZXZlbnQpID0+IHRoaXMub25Eb2N1bWVudEtleURvd24oZXZlbnQpO1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX2tleWRvd25FdmVudExpc3RlbmVyKTtcclxuXHJcbiAgICBpZiAodGhpcy5lbGVtLnF1ZXJ5U2VsZWN0b3IoJ1thdXRvZm9jdXNdJykpIHtcclxuICAgICAgdGhpcy5lbGVtLnF1ZXJ5U2VsZWN0b3IoJ1thdXRvZm9jdXNdJykuZm9jdXMoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uQ2xpY2soZXZlbnQpIHtcclxuICAgIGlmIChldmVudC50YXJnZXQuY2xvc2VzdCgnLm1vZGFsX19jbG9zZScpKSB7XHJcbiAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICAgIHRoaXMuY2xvc2UoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIG9uRG9jdW1lbnRLZXlEb3duKGV2ZW50KSB7XHJcbiAgICBpZiAoZXZlbnQuY29kZSA9PT0gJ0VzY2FwZScpIHtcclxuICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcclxuICAgICAgdGhpcy5jbG9zZSgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgc2V0VGl0bGUodGl0bGUpIHtcclxuICAgIHRoaXMuc3ViKCd0aXRsZScpLnRleHRDb250ZW50ID0gdGl0bGU7XHJcbiAgfVxyXG5cclxuICBzZXRCb2R5KG5vZGUpIHtcclxuICAgIHRoaXMuc3ViKCdib2R5JykuaW5uZXJIVE1MID0gJyc7XHJcbiAgICB0aGlzLnN1YignYm9keScpLmFwcGVuZChub2RlKTtcclxuICB9XHJcblxyXG4gIGNsb3NlKCkge1xyXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX2tleWRvd25FdmVudExpc3RlbmVyKTtcclxuICAgIGRvY3VtZW50LmJvZHkuY2xhc3NMaXN0LnJlbW92ZSgnaXMtbW9kYWwtb3BlbicpO1xyXG4gICAgdGhpcy5lbGVtLnJlbW92ZSgpO1xyXG4gIH1cclxufVxyXG4iXSwic291cmNlUm9vdCI6IiJ9